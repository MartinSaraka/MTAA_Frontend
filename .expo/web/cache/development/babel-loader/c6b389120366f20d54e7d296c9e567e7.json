{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, createRef } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar RegisterPage = function RegisterPage(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      userName = _useState2[0],\n      setUserName = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      userEmail = _useState4[0],\n      setUserEmail = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      userPassword = _useState6[0],\n      setUserPassword = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      errortext = _useState8[0],\n      setErrortext = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      isRegistraionSuccess = _useState10[0],\n      setIsRegistraionSuccess = _useState10[1];\n\n  var emailInputRef = createRef();\n  var passwordInputRef = createRef();\n\n  var handleSubmitButton = function handleSubmitButton() {\n    setErrortext('');\n\n    if (!userName) {\n      alert('Zadajte meno');\n      return;\n    }\n\n    if (!userEmail) {\n      alert('Zadajte E-mail');\n      return;\n    }\n\n    if (!userPassword) {\n      alert('Please fill Password');\n      return;\n    }\n\n    var dataToSend = {\n      name: userName,\n      email: userEmail,\n      password: userPassword\n    };\n    var formBody = [];\n\n    for (var key in dataToSend) {\n      var encodedKey = encodeURIComponent(key);\n      var encodedValue = encodeURIComponent(dataToSend[key]);\n      formBody.push(encodedKey + '=' + encodedValue);\n    }\n\n    formBody = formBody.join('&');\n    fetch('http://127.0.0.1:8000/users/register', {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: userName,\n        email: userEmail,\n        password: userPassword\n      })\n    }).then(function _callee(response) {\n      var data, error;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(response.status);\n\n            case 2:\n              data = _context.sent;\n              console.log(data);\n\n              if (response.ok) {\n                _context.next = 12;\n                break;\n              }\n\n              console.error('bbbbbbbbbbbbbbbbbbbbbbbbbbbb');\n              console.log('Skontrulujte si svoje meno a heslo');\n              alert('Nesprávny vstup');\n              error = data && data.message || response.status;\n              return _context.abrupt(\"return\", Promise.reject(error));\n\n            case 12:\n              setIsRegistraionSuccess(true);\n              alert(\"Zaregistrovaný\");\n              navigation.replace('LoginPage');\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }).catch(function (error) {\n      console.log(error);\n      console.error('halo je tu error!');\n    });\n  };\n\n  if (isRegistraionSuccess) {\n    return _jsxs(View, {\n      style: {\n        flex: 1,\n        backgroundColor: '#307ecc',\n        justifyContent: 'center'\n      },\n      children: [_jsx(Text, {\n        style: styles.successTextStyle,\n        children: \"\\xDAspe\\u0161n\\xE1 registr\\xE1cua\"\n      }), _jsx(TouchableOpacity, {\n        style: styles.buttonStyle,\n        activeOpacity: 0.5,\n        onPress: function onPress() {\n          return props.navigation.navigate('LoginPage');\n        },\n        children: _jsx(Text, {\n          style: styles.buttonTextStyle,\n          children: \"Login Now\"\n        })\n      })]\n    });\n  }\n\n  return _jsx(View, {\n    style: {\n      flex: 1\n    },\n    children: _jsx(ImageBackground, {\n      source: require(\"../assets/images/registerPhoto.png\"),\n      resizeMode: \"cover\",\n      style: styles.image2,\n      imageStyle: styles.image2_imageStyle,\n      children: _jsxs(ScrollView, {\n        keyboardShouldPersistTaps: \"handled\",\n        contentContainerStyle: {\n          flex: 1,\n          justifyContent: 'center',\n          alignContent: 'center'\n        },\n        children: [_jsx(View, {\n          style: {\n            alignItems: 'center'\n          }\n        }), _jsxs(KeyboardAvoidingView, {\n          enabled: true,\n          children: [_jsx(View, {\n            style: styles.SectionStyle,\n            children: _jsx(TextInput, {\n              style: styles.inputStyle,\n              onChangeText: function onChangeText(UserName) {\n                return setUserName(UserName);\n              },\n              underlineColorAndroid: \"#f000\",\n              placeholder: \"Zadajte Meno\",\n              placeholderTextColor: \"#8b9cb5\",\n              autoCapitalize: \"sentences\",\n              returnKeyType: \"next\",\n              onSubmitEditing: function onSubmitEditing() {\n                return emailInputRef.current && emailInputRef.current.focus();\n              },\n              blurOnSubmit: false\n            })\n          }), _jsx(View, {\n            style: styles.SectionStyle,\n            children: _jsx(TextInput, {\n              style: styles.inputStyle,\n              onChangeText: function onChangeText(UserEmail) {\n                return setUserEmail(UserEmail);\n              },\n              underlineColorAndroid: \"#f000\",\n              placeholder: \"Zadajte E-mail\",\n              placeholderTextColor: \"#8b9cb5\",\n              keyboardType: \"email-address\",\n              ref: emailInputRef,\n              returnKeyType: \"next\",\n              onSubmitEditing: function onSubmitEditing() {\n                return passwordInputRef.current && passwordInputRef.current.focus();\n              },\n              blurOnSubmit: false\n            })\n          }), _jsx(View, {\n            style: styles.SectionStyle,\n            children: _jsx(TextInput, {\n              style: styles.inputStyle,\n              onChangeText: function onChangeText(UserPassword) {\n                return setUserPassword(UserPassword);\n              },\n              underlineColorAndroid: \"#f000\",\n              placeholder: \"Zadajte Heslo\",\n              placeholderTextColor: \"#8b9cb5\",\n              ref: passwordInputRef,\n              returnKeyType: \"next\",\n              secureTextEntry: true,\n              onSubmitEditing: Keyboard.dismiss,\n              blurOnSubmit: false\n            })\n          }), errortext != '' ? _jsx(Text, {\n            style: styles.errorTextStyle,\n            children: errortext\n          }) : null, _jsx(TouchableOpacity, {\n            style: styles.buttonStyle,\n            activeOpacity: 0.5,\n            onPress: handleSubmitButton,\n            children: _jsx(Text, {\n              style: styles.buttonTextStyle,\n              children: \"Zaregistruj sa\"\n            })\n          }), _jsx(Text, {\n            style: styles.registerTextStyle,\n            onPress: function onPress() {\n              return navigation.navigate('LoginPage');\n            },\n            children: \"U\\u017E m\\xE1\\u0161 \\xFA\\u010Det? prihl\\xE1s sa\"\n          })]\n        })]\n      })\n    })\n  });\n};\n\nexport default RegisterPage;\nvar styles = StyleSheet.create({\n  SectionStyle: {\n    flexDirection: 'row',\n    height: 40,\n    marginTop: 20,\n    marginLeft: 35,\n    marginRight: 35,\n    margin: 10\n  },\n  registerTextStyle: {\n    color: '#FFFFFF',\n    textAlign: 'center',\n    fontWeight: 'bold',\n    fontSize: 14,\n    alignSelf: 'center',\n    padding: 10\n  },\n  buttonStyle: {\n    backgroundColor: '#7DE24E',\n    borderWidth: 0,\n    color: '#FFFFFF',\n    borderColor: '#7DE24E',\n    height: 40,\n    alignItems: 'center',\n    borderRadius: 30,\n    marginLeft: 35,\n    marginRight: 35,\n    marginTop: 20,\n    marginBottom: 20\n  },\n  buttonTextStyle: {\n    color: '#FFFFFF',\n    paddingVertical: 10,\n    fontSize: 16\n  },\n  inputStyle: {\n    flex: 1,\n    color: 'white',\n    paddingLeft: 15,\n    paddingRight: 15,\n    borderWidth: 1,\n    borderRadius: 30,\n    borderColor: '#dadae8'\n  },\n  image2: {\n    flex: 1,\n    justifyContent: \"center\"\n  },\n  errorTextStyle: {\n    color: 'red',\n    textAlign: 'center',\n    fontSize: 14\n  },\n  successTextStyle: {\n    color: 'white',\n    textAlign: 'center',\n    fontSize: 18,\n    padding: 30\n  }\n});","map":{"version":3,"sources":["/Users/timotejsmolen/WebstormProjects/untitled2/src/screens/RegisterPage.js"],"names":["React","useState","createRef","RegisterPage","navigation","userName","setUserName","userEmail","setUserEmail","userPassword","setUserPassword","errortext","setErrortext","isRegistraionSuccess","setIsRegistraionSuccess","emailInputRef","passwordInputRef","handleSubmitButton","alert","dataToSend","name","email","password","formBody","key","encodedKey","encodeURIComponent","encodedValue","push","join","fetch","method","headers","Accept","body","JSON","stringify","then","response","status","data","console","log","ok","error","message","Promise","reject","replace","catch","flex","backgroundColor","justifyContent","styles","successTextStyle","buttonStyle","props","navigate","buttonTextStyle","require","image2","image2_imageStyle","alignContent","alignItems","SectionStyle","inputStyle","UserName","current","focus","UserEmail","UserPassword","Keyboard","dismiss","errorTextStyle","registerTextStyle","StyleSheet","create","flexDirection","height","marginTop","marginLeft","marginRight","margin","color","textAlign","fontWeight","fontSize","alignSelf","padding","borderWidth","borderColor","borderRadius","marginBottom","paddingVertical","paddingLeft","paddingRight"],"mappings":"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","sourcesContent":["\nimport React, { useState, createRef } from 'react';\nimport {\n  StyleSheet,\n  TextInput,\n  View,\n  Text,\n  Image,\n  KeyboardAvoidingView,\n  Keyboard,\n  TouchableOpacity,\n  ScrollView,\n  ImageBackground\n} from 'react-native';\n\n\n\nconst RegisterPage = ({  navigation }) => {\n  const [userName, setUserName] = useState('');\n  const [userEmail, setUserEmail] = useState('');\n  const [userPassword, setUserPassword] = useState('');\n  const [errortext, setErrortext] = useState('');\n  const [\n    isRegistraionSuccess,\n    setIsRegistraionSuccess\n  ] = useState(false);\n \n  const emailInputRef = createRef();\n  const passwordInputRef = createRef();\n\n  const handleSubmitButton = () => {\n    setErrortext('');\n    if (!userName) {\n      alert('Zadajte meno');\n      return;\n    }\n    if (!userEmail) {\n      alert('Zadajte E-mail');\n      return;\n    }\n    if (!userPassword) {\n      alert('Please fill Password');\n      return;\n    }\n\n\n    var dataToSend = {\n      name: userName,\n      email: userEmail,\n      password: userPassword,\n    };\n    var formBody = [];\n    for (var key in dataToSend) {\n      var encodedKey = encodeURIComponent(key);\n      var encodedValue = encodeURIComponent(dataToSend[key]);\n      formBody.push(encodedKey + '=' + encodedValue);\n    }\n    formBody = formBody.join('&');\n\n    fetch('http://127.0.0.1:8000/users/register', {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: userName,\n        email: userEmail,\n        password: userPassword\n        \n      })\n    }).then(async response => {\n      const data = await response.status;\n      console.log(data)\n\n      // check for error response\n      if (!response.ok) {\n        console.error('bbbbbbbbbbbbbbbbbbbbbbbbbbbb');\n        console.log('Skontrulujte si svoje meno a heslo')\n        alert('Nesprávny vstup');\n        \n        const error = (data && data.message) || response.status;\n        return Promise.reject(error);\n      }\n      else {\n        setIsRegistraionSuccess(true);\n        alert(\"Zaregistrovaný\")\n        navigation.replace('LoginPage');\n      }\n    })\n      .catch(error => {\n        console.log(error)\n        console.error('halo je tu error!');\n\n      })\n  }\n\nif (isRegistraionSuccess) {\n  return (\n    <View\n      style={{\n        flex: 1,\n        backgroundColor: '#307ecc',\n        justifyContent: 'center',\n      }}>\n\n      <Text style={styles.successTextStyle}>\n        Úspešná registrácua\n      </Text>\n      <TouchableOpacity\n        style={styles.buttonStyle}\n        activeOpacity={0.5}\n        onPress={() => props.navigation.navigate('LoginPage')}>\n        <Text style={styles.buttonTextStyle}>Login Now</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\nreturn (\n  <View style={{ flex: 1 }}>\n    <ImageBackground\n\n      source={require(\"../assets/images/registerPhoto.png\")}\n      resizeMode=\"cover\"\n      style={styles.image2}\n      imageStyle={styles.image2_imageStyle}\n    >\n      <ScrollView\n        keyboardShouldPersistTaps=\"handled\"\n        contentContainerStyle={{\n          flex: 1,\n          justifyContent: 'center',\n          alignContent: 'center',\n        }}>\n        <View style={{ alignItems: 'center' }}>\n\n        </View>\n        <KeyboardAvoidingView enabled>\n          <View style={styles.SectionStyle}>\n            <TextInput\n              style={styles.inputStyle}\n              onChangeText={(UserName) => setUserName(UserName)}\n              underlineColorAndroid=\"#f000\"\n              placeholder=\"Zadajte Meno\"\n              placeholderTextColor=\"#8b9cb5\"\n              autoCapitalize=\"sentences\"\n              returnKeyType=\"next\"\n              onSubmitEditing={() =>\n                emailInputRef.current && emailInputRef.current.focus()\n              }\n              blurOnSubmit={false}\n            />\n          </View>\n          <View style={styles.SectionStyle}>\n            <TextInput\n              style={styles.inputStyle}\n              onChangeText={(UserEmail) => setUserEmail(UserEmail)}\n              underlineColorAndroid=\"#f000\"\n              placeholder=\"Zadajte E-mail\"\n              placeholderTextColor=\"#8b9cb5\"\n              keyboardType=\"email-address\"\n              ref={emailInputRef}\n              returnKeyType=\"next\"\n              onSubmitEditing={() =>\n                passwordInputRef.current &&\n                passwordInputRef.current.focus()\n              }\n              blurOnSubmit={false}\n            />\n          </View>\n          <View style={styles.SectionStyle}>\n            <TextInput\n              style={styles.inputStyle}\n              onChangeText={(UserPassword) =>\n                setUserPassword(UserPassword)\n              }\n              underlineColorAndroid=\"#f000\"\n              placeholder=\"Zadajte Heslo\"\n              placeholderTextColor=\"#8b9cb5\"\n              ref={passwordInputRef}\n              returnKeyType=\"next\"\n              secureTextEntry={true}\n              onSubmitEditing={Keyboard.dismiss}\n              blurOnSubmit={false}\n            />\n          </View>\n\n          {errortext != '' ? (\n            <Text style={styles.errorTextStyle}>\n              {errortext}\n            </Text>\n          ) : null}\n          <TouchableOpacity\n            style={styles.buttonStyle}\n            activeOpacity={0.5}\n            onPress={handleSubmitButton}\n          >\n            <Text style={styles.buttonTextStyle}>Zaregistruj sa</Text>\n          </TouchableOpacity>\n\n          <Text\n              style={styles.registerTextStyle}\n              onPress={() => navigation.navigate('LoginPage')}>\n              Už máš účet? prihlás sa\n            </Text>\n        </KeyboardAvoidingView>\n      </ScrollView>\n    </ImageBackground>\n  </View>\n);\n};\nexport default RegisterPage;\n\nconst styles = StyleSheet.create({\n  SectionStyle: {\n    flexDirection: 'row',\n    height: 40,\n    marginTop: 20,\n    marginLeft: 35,\n    marginRight: 35,\n    margin: 10,\n  },\n  registerTextStyle: {\n    color: '#FFFFFF',\n    textAlign: 'center',\n    fontWeight: 'bold',\n    fontSize: 14,\n    alignSelf: 'center',\n    padding: 10,\n  },\n  buttonStyle: {\n    backgroundColor: '#7DE24E',\n    borderWidth: 0,\n    color: '#FFFFFF',\n    borderColor: '#7DE24E',\n    height: 40,\n    alignItems: 'center',\n    borderRadius: 30,\n    marginLeft: 35,\n    marginRight: 35,\n    marginTop: 20,\n    marginBottom: 20,\n  },\n  buttonTextStyle: {\n    color: '#FFFFFF',\n    paddingVertical: 10,\n    fontSize: 16,\n  },\n  inputStyle: {\n    flex: 1,\n    color: 'white',\n    paddingLeft: 15,\n    paddingRight: 15,\n    borderWidth: 1,\n    borderRadius: 30,\n    borderColor: '#dadae8',\n  },\n  image2: {\n    flex: 1,\n    justifyContent: \"center\"\n  },\n  errorTextStyle: {\n    color: 'red',\n    textAlign: 'center',\n    fontSize: 14,\n  },\n  successTextStyle: {\n    color: 'white',\n    textAlign: 'center',\n    fontSize: 18,\n    padding: 30,\n  },\n});"]},"metadata":{},"sourceType":"module"}