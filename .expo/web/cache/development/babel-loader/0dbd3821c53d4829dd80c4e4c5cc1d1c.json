{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, createRef } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar RegisterScreen = function RegisterScreen(props) {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      userName = _useState2[0],\n      setUserName = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      userEmail = _useState4[0],\n      setUserEmail = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      userPassword = _useState6[0],\n      setUserPassword = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      errortext = _useState8[0],\n      setErrortext = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      isRegistraionSuccess = _useState10[0],\n      setIsRegistraionSuccess = _useState10[1];\n\n  var emailInputRef = createRef();\n  var passwordInputRef = createRef();\n\n  var handleSubmitButton = function handleSubmitButton() {\n    setErrortext('');\n\n    if (!userName) {\n      alert('Zadjte meno');\n      return;\n    }\n\n    if (!userEmail) {\n      alert('Zadajte E-mail');\n      return;\n    }\n\n    if (!userPassword) {\n      alert('Please fill Password');\n      return;\n    }\n\n    var dataToSend = {\n      name: userName,\n      email: userEmail,\n      password: userPassword\n    };\n    var formBody = [];\n\n    for (var key in dataToSend) {\n      var encodedKey = encodeURIComponent(key);\n      var encodedValue = encodeURIComponent(dataToSend[key]);\n      formBody.push(encodedKey + '=' + encodedValue);\n    }\n\n    formBody = formBody.join('&');\n    fetch('http://localhost:3000/api/user/register', {\n      method: 'POST',\n      body: formBody,\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (responseJson) {\n      console.log(responseJson);\n\n      if (responseJson.status === 'success') {\n        setIsRegistraionSuccess(true);\n        console.log('Úspešná registrácia. Prihláste sa prosím');\n      } else {\n        setErrortext(responseJson.msg);\n      }\n    }).catch(function (error) {\n      console.error(error);\n    });\n  };\n\n  if (isRegistraionSuccess) {\n    return _jsxs(View, {\n      style: {\n        flex: 1,\n        backgroundColor: '#307ecc',\n        justifyContent: 'center'\n      },\n      children: [_jsx(Image, {\n        source: require(\"../Image/success.png\"),\n        style: {\n          height: 150,\n          resizeMode: 'contain',\n          alignSelf: 'center'\n        }\n      }), _jsx(Text, {\n        style: styles.successTextStyle,\n        children: \"\\xDAspe\\u0161n\\xE1 registr\\xE1cua\"\n      }), _jsx(TouchableOpacity, {\n        style: styles.buttonStyle,\n        activeOpacity: 0.5,\n        onPress: function onPress() {\n          return props.navigation.navigate('LoginScreen');\n        },\n        children: _jsx(Text, {\n          style: styles.buttonTextStyle,\n          children: \"Login Now\"\n        })\n      })]\n    });\n  }\n\n  return _jsx(View, {\n    style: {\n      flex: 1,\n      backgroundColor: '#307ecc'\n    },\n    children: _jsxs(ScrollView, {\n      keyboardShouldPersistTaps: \"handled\",\n      contentContainerStyle: {\n        justifyContent: 'center',\n        alignContent: 'center'\n      },\n      children: [_jsx(View, {\n        style: {\n          alignItems: 'center'\n        },\n        children: _jsx(Image, {\n          source: require(\"../Image/aboutreact.png\"),\n          style: {\n            width: '50%',\n            height: 100,\n            resizeMode: 'contain',\n            margin: 30\n          }\n        })\n      }), _jsxs(KeyboardAvoidingView, {\n        enabled: true,\n        children: [_jsx(View, {\n          style: styles.SectionStyle,\n          children: _jsx(TextInput, {\n            style: styles.inputStyle,\n            onChangeText: function onChangeText(UserName) {\n              return setUserName(UserName);\n            },\n            underlineColorAndroid: \"#f000\",\n            placeholder: \"Zadajte Meno\",\n            placeholderTextColor: \"#8b9cb5\",\n            autoCapitalize: \"sentences\",\n            returnKeyType: \"next\",\n            onSubmitEditing: function onSubmitEditing() {\n              return emailInputRef.current && emailInputRef.current.focus();\n            },\n            blurOnSubmit: false\n          })\n        }), _jsx(View, {\n          style: styles.SectionStyle,\n          children: _jsx(TextInput, {\n            style: styles.inputStyle,\n            onChangeText: function onChangeText(UserEmail) {\n              return setUserEmail(UserEmail);\n            },\n            underlineColorAndroid: \"#f000\",\n            placeholder: \"Zadajte E-mail\",\n            placeholderTextColor: \"#8b9cb5\",\n            keyboardType: \"email-address\",\n            ref: emailInputRef,\n            returnKeyType: \"next\",\n            onSubmitEditing: function onSubmitEditing() {\n              return passwordInputRef.current && passwordInputRef.current.focus();\n            },\n            blurOnSubmit: false\n          })\n        }), _jsx(View, {\n          style: styles.SectionStyle,\n          children: _jsx(TextInput, {\n            style: styles.inputStyle,\n            onChangeText: function onChangeText(UserPassword) {\n              return setUserPassword(UserPassword);\n            },\n            underlineColorAndroid: \"#f000\",\n            placeholder: \"Zadajte Heslo\",\n            placeholderTextColor: \"#8b9cb5\",\n            ref: passwordInputRef,\n            returnKeyType: \"next\",\n            secureTextEntry: true,\n            onSubmitEditing: Keyboard.dismiss,\n            blurOnSubmit: false\n          })\n        }), _jsx(View, {\n          style: styles.SectionStyle,\n          children: _jsx(TextInput, {\n            style: styles.inputStyle,\n            onChangeText: function onChangeText(UserAddress) {\n              return setUserAddress(UserAddress);\n            },\n            underlineColorAndroid: \"#f000\",\n            placeholder: \"Enter Address\",\n            placeholderTextColor: \"#8b9cb5\",\n            autoCapitalize: \"sentences\",\n            ref: addressInputRef,\n            returnKeyType: \"next\",\n            onSubmitEditing: Keyboard.dismiss,\n            blurOnSubmit: false\n          })\n        }), errortext != '' ? _jsx(Text, {\n          style: styles.errorTextStyle,\n          children: errortext\n        }) : null, _jsx(TouchableOpacity, {\n          style: styles.buttonStyle,\n          activeOpacity: 0.5,\n          children: _jsx(Text, {\n            style: styles.buttonTextStyle,\n            children: \"Zaregistruj sa\"\n          })\n        })]\n      })]\n    })\n  });\n};\n\nexport default RegisterScreen;\nvar styles = StyleSheet.create({\n  SectionStyle: {\n    flexDirection: 'row',\n    height: 40,\n    marginTop: 20,\n    marginLeft: 35,\n    marginRight: 35,\n    margin: 10\n  },\n  buttonStyle: {\n    backgroundColor: '#7DE24E',\n    borderWidth: 0,\n    color: '#FFFFFF',\n    borderColor: '#7DE24E',\n    height: 40,\n    alignItems: 'center',\n    borderRadius: 30,\n    marginLeft: 35,\n    marginRight: 35,\n    marginTop: 20,\n    marginBottom: 20\n  },\n  buttonTextStyle: {\n    color: '#FFFFFF',\n    paddingVertical: 10,\n    fontSize: 16\n  },\n  inputStyle: {\n    flex: 1,\n    color: 'white',\n    paddingLeft: 15,\n    paddingRight: 15,\n    borderWidth: 1,\n    borderRadius: 30,\n    borderColor: '#dadae8'\n  },\n  errorTextStyle: {\n    color: 'red',\n    textAlign: 'center',\n    fontSize: 14\n  },\n  successTextStyle: {\n    color: 'white',\n    textAlign: 'center',\n    fontSize: 18,\n    padding: 30\n  }\n});","map":{"version":3,"sources":["C:/Users/sacre/AwesomeProject/src/screens/RegisterPage.js"],"names":["React","useState","createRef","RegisterScreen","props","userName","setUserName","userEmail","setUserEmail","userPassword","setUserPassword","errortext","setErrortext","isRegistraionSuccess","setIsRegistraionSuccess","emailInputRef","passwordInputRef","handleSubmitButton","alert","dataToSend","name","email","password","formBody","key","encodedKey","encodeURIComponent","encodedValue","push","join","fetch","method","body","headers","then","response","json","responseJson","console","log","status","msg","catch","error","flex","backgroundColor","justifyContent","require","height","resizeMode","alignSelf","styles","successTextStyle","buttonStyle","navigation","navigate","buttonTextStyle","alignContent","alignItems","width","margin","SectionStyle","inputStyle","UserName","current","focus","UserEmail","UserPassword","Keyboard","dismiss","UserAddress","setUserAddress","addressInputRef","errorTextStyle","StyleSheet","create","flexDirection","marginTop","marginLeft","marginRight","borderWidth","color","borderColor","borderRadius","marginBottom","paddingVertical","fontSize","paddingLeft","paddingRight","textAlign","padding"],"mappings":"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","sourcesContent":["// Example of Splash, Login and Sign Up in React Native\r\n// https://aboutreact.com/react-native-login-and-signup/\r\n\r\n// Import React and Component\r\nimport React, {useState, createRef} from 'react';\r\nimport {\r\n  StyleSheet,\r\n  TextInput,\r\n  View,\r\n  Text,\r\n  Image,\r\n  KeyboardAvoidingView,\r\n  Keyboard,\r\n  TouchableOpacity,\r\n  ScrollView,\r\n} from 'react-native';\r\n\r\n\r\n\r\nconst RegisterScreen = (props) => {\r\n  const [userName, setUserName] = useState('');\r\n  const [userEmail, setUserEmail] = useState('');\r\n  const [userPassword, setUserPassword] = useState('');\r\n  const [errortext, setErrortext] = useState('');\r\n  const [\r\n    isRegistraionSuccess,\r\n    setIsRegistraionSuccess\r\n  ] = useState(false);\r\n\r\n  const emailInputRef = createRef();\r\n  const passwordInputRef = createRef();\r\n\r\n  const handleSubmitButton = () => {\r\n    setErrortext('');\r\n    if (!userName) {\r\n      alert('Zadjte meno');\r\n      return;\r\n    }\r\n    if (!userEmail) {\r\n      alert('Zadajte E-mail');\r\n      return;\r\n    }\r\n    if (!userPassword) {\r\n      alert('Please fill Password');\r\n      return;\r\n    }\r\n\r\n   \r\n    var dataToSend = {\r\n      name: userName,\r\n      email: userEmail,\r\n      password: userPassword,\r\n    };\r\n    var formBody = [];\r\n    for (var key in dataToSend) {\r\n      var encodedKey = encodeURIComponent(key);\r\n      var encodedValue = encodeURIComponent(dataToSend[key]);\r\n      formBody.push(encodedKey + '=' + encodedValue);\r\n    }\r\n    formBody = formBody.join('&');\r\n\r\n    fetch('http://localhost:3000/api/user/register', {\r\n      method: 'POST',\r\n      body: formBody,\r\n      headers: {\r\n        //Header Defination\r\n        'Content-Type':\r\n        'application/x-www-form-urlencoded;charset=UTF-8',\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((responseJson) => {\r\n        \r\n        console.log(responseJson);\r\n        // If server response message same as Data Matched\r\n        if (responseJson.status === 'success') {\r\n          setIsRegistraionSuccess(true);\r\n          console.log(\r\n            'Úspešná registrácia. Prihláste sa prosím'\r\n          );\r\n        } else {\r\n          setErrortext(responseJson.msg);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        \r\n        console.error(error);\r\n      });\r\n  };\r\n  if (isRegistraionSuccess) {\r\n    return (\r\n      <View\r\n        style={{\r\n          flex: 1,\r\n          backgroundColor: '#307ecc',\r\n          justifyContent: 'center',\r\n        }}>\r\n        <Image\r\n          source={require('../Image/success.png')}\r\n          style={{\r\n            height: 150,\r\n            resizeMode: 'contain',\r\n            alignSelf: 'center'\r\n          }}\r\n        />\r\n        <Text style={styles.successTextStyle}>\r\n          Úspešná registrácua\r\n        </Text>\r\n        <TouchableOpacity\r\n          style={styles.buttonStyle}\r\n          activeOpacity={0.5}\r\n          onPress={() => props.navigation.navigate('LoginScreen')}>\r\n          <Text style={styles.buttonTextStyle}>Login Now</Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n    );\r\n  }\r\n  return (\r\n    <View style={{flex: 1, backgroundColor: '#307ecc'}}>\r\n      \r\n      <ScrollView\r\n        keyboardShouldPersistTaps=\"handled\"\r\n        contentContainerStyle={{\r\n          justifyContent: 'center',\r\n          alignContent: 'center',\r\n        }}>\r\n        <View style={{alignItems: 'center'}}>\r\n          <Image\r\n            source={require('../Image/aboutreact.png')}\r\n            style={{\r\n              width: '50%',\r\n              height: 100,\r\n              resizeMode: 'contain',\r\n              margin: 30,\r\n            }}\r\n          />\r\n        </View>\r\n        <KeyboardAvoidingView enabled>\r\n          <View style={styles.SectionStyle}>\r\n            <TextInput\r\n              style={styles.inputStyle}\r\n              onChangeText={(UserName) => setUserName(UserName)}\r\n              underlineColorAndroid=\"#f000\"\r\n              placeholder=\"Zadajte Meno\"\r\n              placeholderTextColor=\"#8b9cb5\"\r\n              autoCapitalize=\"sentences\"\r\n              returnKeyType=\"next\"\r\n              onSubmitEditing={() =>\r\n                emailInputRef.current && emailInputRef.current.focus()\r\n              }\r\n              blurOnSubmit={false}\r\n            />\r\n          </View>\r\n          <View style={styles.SectionStyle}>\r\n            <TextInput\r\n              style={styles.inputStyle}\r\n              onChangeText={(UserEmail) => setUserEmail(UserEmail)}\r\n              underlineColorAndroid=\"#f000\"\r\n              placeholder=\"Zadajte E-mail\"\r\n              placeholderTextColor=\"#8b9cb5\"\r\n              keyboardType=\"email-address\"\r\n              ref={emailInputRef}\r\n              returnKeyType=\"next\"\r\n              onSubmitEditing={() =>\r\n                passwordInputRef.current &&\r\n                passwordInputRef.current.focus()\r\n              }\r\n              blurOnSubmit={false}\r\n            />\r\n          </View>\r\n          <View style={styles.SectionStyle}>\r\n            <TextInput\r\n              style={styles.inputStyle}\r\n              onChangeText={(UserPassword) =>\r\n                setUserPassword(UserPassword)\r\n              }\r\n              underlineColorAndroid=\"#f000\"\r\n              placeholder=\"Zadajte Heslo\"\r\n              placeholderTextColor=\"#8b9cb5\"\r\n              ref={passwordInputRef}\r\n              returnKeyType=\"next\"\r\n              secureTextEntry={true}\r\n              onSubmitEditing={Keyboard.dismiss}\r\n              blurOnSubmit={false}\r\n            />\r\n          </View>\r\n          <View style={styles.SectionStyle}>\r\n            <TextInput\r\n              style={styles.inputStyle}\r\n              onChangeText={(UserAddress) =>\r\n                setUserAddress(UserAddress)\r\n              }\r\n              underlineColorAndroid=\"#f000\"\r\n              placeholder=\"Enter Address\"\r\n              placeholderTextColor=\"#8b9cb5\"\r\n              autoCapitalize=\"sentences\"\r\n              ref={addressInputRef}\r\n              returnKeyType=\"next\"\r\n              onSubmitEditing={Keyboard.dismiss}\r\n              blurOnSubmit={false}\r\n            />\r\n          </View>\r\n          {errortext != '' ? (\r\n            <Text style={styles.errorTextStyle}>\r\n              {errortext}\r\n            </Text>\r\n          ) : null}\r\n          <TouchableOpacity\r\n            style={styles.buttonStyle}\r\n            activeOpacity={0.5}\r\n            /*onPress={handleSubmitButton}*/\r\n            >\r\n            <Text style={styles.buttonTextStyle}>Zaregistruj sa</Text>\r\n          </TouchableOpacity>\r\n        </KeyboardAvoidingView>\r\n      </ScrollView>\r\n    </View>\r\n  );\r\n};\r\nexport default RegisterScreen;\r\n\r\nconst styles = StyleSheet.create({\r\n  SectionStyle: {\r\n    flexDirection: 'row',\r\n    height: 40,\r\n    marginTop: 20,\r\n    marginLeft: 35,\r\n    marginRight: 35,\r\n    margin: 10,\r\n  },\r\n  buttonStyle: {\r\n    backgroundColor: '#7DE24E',\r\n    borderWidth: 0,\r\n    color: '#FFFFFF',\r\n    borderColor: '#7DE24E',\r\n    height: 40,\r\n    alignItems: 'center',\r\n    borderRadius: 30,\r\n    marginLeft: 35,\r\n    marginRight: 35,\r\n    marginTop: 20,\r\n    marginBottom: 20,\r\n  },\r\n  buttonTextStyle: {\r\n    color: '#FFFFFF',\r\n    paddingVertical: 10,\r\n    fontSize: 16,\r\n  },\r\n  inputStyle: {\r\n    flex: 1,\r\n    color: 'white',\r\n    paddingLeft: 15,\r\n    paddingRight: 15,\r\n    borderWidth: 1,\r\n    borderRadius: 30,\r\n    borderColor: '#dadae8',\r\n  },\r\n  errorTextStyle: {\r\n    color: 'red',\r\n    textAlign: 'center',\r\n    fontSize: 14,\r\n  },\r\n  successTextStyle: {\r\n    color: 'white',\r\n    textAlign: 'center',\r\n    fontSize: 18,\r\n    padding: 30,\r\n  },\r\n});"]},"metadata":{},"sourceType":"module"}