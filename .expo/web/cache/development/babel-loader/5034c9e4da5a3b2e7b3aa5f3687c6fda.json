{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { RTCPeerConnection, RTCView, mediaDevices, RTCIceCandidate, RTCSessionDescription } from 'react-native-webrtc';\nimport { db } from \"../utilities/firebase\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar configuration = {\n  iceServers: [{\n    urls: ['stun:stun1.l.google.com:19302', 'stun:stun2.l.google.com:19302']\n  }],\n  iceCandidatePoolSize: 10\n};\nexport default function JoinScreen() {\n  function onBackPress() {\n    if (cachedLocalPC) {\n      cachedLocalPC.removeStream(localStream);\n      cachedLocalPC.close();\n    }\n\n    setLocalStream();\n    setRemoteStream();\n    setCachedLocalPC();\n    setScreen(screens.ROOM);\n  }\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      localStream = _useState2[0],\n      setLocalStream = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      remoteStream = _useState4[0],\n      setRemoteStream = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      cachedLocalPC = _useState6[0],\n      setCachedLocalPC = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      isMuted = _useState8[0],\n      setIsMuted = _useState8[1];\n\n  useEffect(function () {}, []);\n\n  var startLocalStream = function startLocalStream() {\n    var isFront, devices, facing, videoSourceId, facingMode, constraints, newStream;\n    return _regeneratorRuntime.async(function startLocalStream$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            isFront = true;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(mediaDevices.enumerateDevices());\n\n          case 3:\n            devices = _context.sent;\n            facing = isFront ? 'front' : 'environment';\n            videoSourceId = devices.find(function (device) {\n              return device.kind === 'videoinput' && device.facing === facing;\n            });\n            facingMode = isFront ? 'user' : 'environment';\n            constraints = {\n              audio: true,\n              video: {\n                mandatory: {\n                  minWidth: 500,\n                  minHeight: 300,\n                  minFrameRate: 30\n                },\n                facingMode: facingMode,\n                optional: videoSourceId ? [{\n                  sourceId: videoSourceId\n                }] : []\n              }\n            };\n            _context.next = 10;\n            return _regeneratorRuntime.awrap(mediaDevices.getUserMedia(constraints));\n\n          case 10:\n            newStream = _context.sent;\n            setLocalStream(newStream);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var joinCall = function joinCall(id) {\n    var roomRef, roomSnapshot, localPC, calleeCandidatesCollection, offer, answer, roomWithAnswer;\n    return _regeneratorRuntime.async(function joinCall$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(db.collection('rooms').doc(id));\n\n          case 2:\n            roomRef = _context3.sent;\n            _context3.next = 5;\n            return _regeneratorRuntime.awrap(roomRef.get());\n\n          case 5:\n            roomSnapshot = _context3.sent;\n\n            if (roomSnapshot.exists) {\n              _context3.next = 8;\n              break;\n            }\n\n            return _context3.abrupt(\"return\");\n\n          case 8:\n            localPC = new RTCPeerConnection(configuration);\n            localPC.addStream(localStream);\n            calleeCandidatesCollection = roomRef.collection('calleeCandidates');\n\n            localPC.onicecandidate = function (e) {\n              if (!e.candidate) {\n                console.log('Got final candidate!');\n                return;\n              }\n\n              calleeCandidatesCollection.add(e.candidate.toJSON());\n            };\n\n            localPC.onaddstream = function (e) {\n              if (e.stream && remoteStream !== e.stream) {\n                console.log('RemotePC received the stream join', e.stream);\n                setRemoteStream(e.stream);\n              }\n            };\n\n            offer = roomSnapshot.data().offer;\n            _context3.next = 16;\n            return _regeneratorRuntime.awrap(localPC.setRemoteDescription(new RTCSessionDescription(offer)));\n\n          case 16:\n            _context3.next = 18;\n            return _regeneratorRuntime.awrap(localPC.createAnswer());\n\n          case 18:\n            answer = _context3.sent;\n            _context3.next = 21;\n            return _regeneratorRuntime.awrap(localPC.setLocalDescription(answer));\n\n          case 21:\n            roomWithAnswer = {\n              answer: answer\n            };\n            _context3.next = 24;\n            return _regeneratorRuntime.awrap(roomRef.update(roomWithAnswer));\n\n          case 24:\n            roomRef.collection('callerCandidates').onSnapshot(function (snapshot) {\n              snapshot.docChanges().forEach(function _callee(change) {\n                var data;\n                return _regeneratorRuntime.async(function _callee$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        if (!(change.type === 'added')) {\n                          _context2.next = 4;\n                          break;\n                        }\n\n                        data = change.doc.data();\n                        _context2.next = 4;\n                        return _regeneratorRuntime.awrap(localPC.addIceCandidate(new RTCIceCandidate(data)));\n\n                      case 4:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, null, null, null, Promise);\n              });\n            });\n            setCachedLocalPC(localPC);\n\n          case 26:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var switchCamera = function switchCamera() {\n    localStream.getVideoTracks().forEach(function (track) {\n      return track._switchCamera();\n    });\n  };\n\n  var toggleMute = function toggleMute() {\n    if (!remoteStream) {\n      return;\n    }\n\n    localStream.getAudioTracks().forEach(function (track) {\n      track.enabled = !track.enabled;\n      setIsMuted(!track.enabled);\n    });\n  };\n\n  return _jsxs(_Fragment, {\n    children: [_jsx(Text, {\n      style: styles.heading,\n      children: \"Join Screen\"\n    }), _jsxs(Text, {\n      style: styles.heading,\n      children: [\"Room : \", roomId]\n    }), _jsxs(View, {\n      style: styles.callButtons,\n      children: [_jsx(View, {\n        styles: styles.buttonContainer,\n        children: _jsx(Button, {\n          title: \"Click to stop call\",\n          onPress: onBackPress\n        })\n      }), _jsxs(View, {\n        styles: styles.buttonContainer,\n        children: [!localStream && _jsx(Button, {\n          title: \"Click to start stream\",\n          onPress: startLocalStream\n        }), localStream && _jsx(Button, {\n          title: \"Click to join call\",\n          onPress: function onPress() {\n            return joinCall(roomId);\n          },\n          disabled: !!remoteStream\n        })]\n      })]\n    }), localStream && _jsxs(View, {\n      style: styles.toggleButtons,\n      children: [_jsx(Button, {\n        title: \"Switch camera\",\n        onPress: switchCamera\n      }), _jsx(Button, {\n        title: (isMuted ? 'Unmute' : 'Mute') + \" stream\",\n        onPress: toggleMute,\n        disabled: !remoteStream\n      })]\n    }), _jsxs(View, {\n      style: {\n        display: 'flex',\n        flex: 1,\n        padding: 10\n      },\n      children: [_jsx(View, {\n        style: styles.rtcview,\n        children: localStream && _jsx(RTCView, {\n          style: styles.rtc,\n          streamURL: localStream && localStream.toURL()\n        })\n      }), _jsx(View, {\n        style: styles.rtcview,\n        children: remoteStream && _jsx(RTCView, {\n          style: styles.rtc,\n          streamURL: remoteStream && remoteStream.toURL()\n        })\n      })]\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  heading: {\n    alignSelf: 'center',\n    fontSize: 30\n  },\n  rtcview: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'black',\n    margin: 5\n  },\n  rtc: {\n    flex: 1,\n    width: '100%',\n    height: '100%'\n  },\n  toggleButtons: {\n    width: '100%',\n    flexDirection: 'row',\n    justifyContent: 'space-around'\n  },\n  callButtons: {\n    padding: 10,\n    width: '100%',\n    flexDirection: 'row',\n    justifyContent: 'space-around'\n  },\n  buttonContainer: {\n    margin: 5\n  }\n});","map":{"version":3,"sources":["/Users/timotejsmolen/WebstormProjects/untitled2/src/screens/JoinScreen.js"],"names":["React","useState","useEffect","RTCPeerConnection","RTCView","mediaDevices","RTCIceCandidate","RTCSessionDescription","db","configuration","iceServers","urls","iceCandidatePoolSize","JoinScreen","onBackPress","cachedLocalPC","removeStream","localStream","close","setLocalStream","setRemoteStream","setCachedLocalPC","setScreen","screens","ROOM","remoteStream","isMuted","setIsMuted","startLocalStream","isFront","enumerateDevices","devices","facing","videoSourceId","find","device","kind","facingMode","constraints","audio","video","mandatory","minWidth","minHeight","minFrameRate","optional","sourceId","getUserMedia","newStream","joinCall","id","collection","doc","roomRef","get","roomSnapshot","exists","localPC","addStream","calleeCandidatesCollection","onicecandidate","e","candidate","console","log","add","toJSON","onaddstream","stream","offer","data","setRemoteDescription","createAnswer","answer","setLocalDescription","roomWithAnswer","update","onSnapshot","snapshot","docChanges","forEach","change","type","addIceCandidate","switchCamera","getVideoTracks","track","_switchCamera","toggleMute","getAudioTracks","enabled","styles","heading","roomId","callButtons","buttonContainer","toggleButtons","display","flex","padding","rtcview","rtc","toURL","StyleSheet","create","alignSelf","fontSize","justifyContent","alignItems","backgroundColor","margin","width","height","flexDirection"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;;;AAGA,SAASC,iBAAT,EAA4BC,OAA5B,EAAqCC,YAArC,EAAmDC,eAAnD,EAAoEC,qBAApE,QAAiG,qBAAjG;AACA,SAASC,EAAT;;;;AAEA,IAAMC,aAAa,GAAG;AAClBC,EAAAA,UAAU,EAAE,CACR;AACIC,IAAAA,IAAI,EAAE,CAAC,+BAAD,EAAkC,+BAAlC;AADV,GADQ,CADM;AAMlBC,EAAAA,oBAAoB,EAAE;AANJ,CAAtB;AASA,eAAe,SAASC,UAAT,GAAqB;AAEhC,WAASC,WAAT,GAAuB;AACnB,QAAIC,aAAJ,EAAmB;AACfA,MAAAA,aAAa,CAACC,YAAd,CAA2BC,WAA3B;AACAF,MAAAA,aAAa,CAACG,KAAd;AACH;;AACDC,IAAAA,cAAc;AACdC,IAAAA,eAAe;AACfC,IAAAA,gBAAgB;AAEhBC,IAAAA,SAAS,CAACC,OAAO,CAACC,IAAT,CAAT;AACH;;AAED,kBAAsCvB,QAAQ,EAA9C;AAAA;AAAA,MAAOgB,WAAP;AAAA,MAAoBE,cAApB;;AACA,mBAAwClB,QAAQ,EAAhD;AAAA;AAAA,MAAOwB,YAAP;AAAA,MAAqBL,eAArB;;AACA,mBAA0CnB,QAAQ,EAAlD;AAAA;AAAA,MAAOc,aAAP;AAAA,MAAsBM,gBAAtB;;AAEA,mBAA8BpB,QAAQ,CAAC,KAAD,CAAtC;AAAA;AAAA,MAAOyB,OAAP;AAAA,MAAgBC,UAAhB;;AAEAzB,EAAAA,SAAS,CAAC,YAAM,CAEf,CAFQ,EAEN,EAFM,CAAT;;AAIA,MAAM0B,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEfC,YAAAA,OAFe,GAEL,IAFK;AAAA;AAAA,6CAGCxB,YAAY,CAACyB,gBAAb,EAHD;;AAAA;AAGfC,YAAAA,OAHe;AAKfC,YAAAA,MALe,GAKNH,OAAO,GAAG,OAAH,GAAa,aALd;AAMfI,YAAAA,aANe,GAMCF,OAAO,CAACG,IAAR,CAAa,UAAAC,MAAM;AAAA,qBAAIA,MAAM,CAACC,IAAP,KAAgB,YAAhB,IAAgCD,MAAM,CAACH,MAAP,KAAkBA,MAAtD;AAAA,aAAnB,CAND;AAOfK,YAAAA,UAPe,GAOFR,OAAO,GAAG,MAAH,GAAY,aAPjB;AAQfS,YAAAA,WARe,GAQD;AAChBC,cAAAA,KAAK,EAAE,IADS;AAEhBC,cAAAA,KAAK,EAAE;AACHC,gBAAAA,SAAS,EAAE;AACPC,kBAAAA,QAAQ,EAAE,GADH;AAEPC,kBAAAA,SAAS,EAAE,GAFJ;AAGPC,kBAAAA,YAAY,EAAE;AAHP,iBADR;AAMHP,gBAAAA,UAAU,EAAVA,UANG;AAOHQ,gBAAAA,QAAQ,EAAEZ,aAAa,GAAG,CAAC;AAAEa,kBAAAA,QAAQ,EAAEb;AAAZ,iBAAD,CAAH,GAAmC;AAPvD;AAFS,aARC;AAAA;AAAA,6CAoBG5B,YAAY,CAAC0C,YAAb,CAA0BT,WAA1B,CApBH;;AAAA;AAoBfU,YAAAA,SApBe;AAqBrB7B,YAAAA,cAAc,CAAC6B,SAAD,CAAd;;AArBqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAzB;;AAwBA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAMC,EAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACS1C,EAAE,CAAC2C,UAAH,CAAc,OAAd,EAAuBC,GAAvB,CAA2BF,EAA3B,CADT;;AAAA;AACPG,YAAAA,OADO;AAAA;AAAA,6CAEcA,OAAO,CAACC,GAAR,EAFd;;AAAA;AAEPC,YAAAA,YAFO;;AAAA,gBAIRA,YAAY,CAACC,MAJL;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAKPC,YAAAA,OALO,GAKG,IAAItD,iBAAJ,CAAsBM,aAAtB,CALH;AAMbgD,YAAAA,OAAO,CAACC,SAAR,CAAkBzC,WAAlB;AAEM0C,YAAAA,0BARO,GAQsBN,OAAO,CAACF,UAAR,CAAmB,kBAAnB,CARtB;;AASbM,YAAAA,OAAO,CAACG,cAAR,GAAyB,UAAAC,CAAC,EAAI;AAC1B,kBAAI,CAACA,CAAC,CAACC,SAAP,EAAkB;AACdC,gBAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA;AACH;;AACDL,cAAAA,0BAA0B,CAACM,GAA3B,CAA+BJ,CAAC,CAACC,SAAF,CAAYI,MAAZ,EAA/B;AACH,aAND;;AAQAT,YAAAA,OAAO,CAACU,WAAR,GAAsB,UAAAN,CAAC,EAAI;AACvB,kBAAIA,CAAC,CAACO,MAAF,IAAY3C,YAAY,KAAKoC,CAAC,CAACO,MAAnC,EAA2C;AACvCL,gBAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ,EAAiDH,CAAC,CAACO,MAAnD;AACAhD,gBAAAA,eAAe,CAACyC,CAAC,CAACO,MAAH,CAAf;AACH;AACJ,aALD;;AAOMC,YAAAA,KAxBO,GAwBCd,YAAY,CAACe,IAAb,GAAoBD,KAxBrB;AAAA;AAAA,6CAyBPZ,OAAO,CAACc,oBAAR,CAA6B,IAAIhE,qBAAJ,CAA0B8D,KAA1B,CAA7B,CAzBO;;AAAA;AAAA;AAAA,6CA2BQZ,OAAO,CAACe,YAAR,EA3BR;;AAAA;AA2BPC,YAAAA,MA3BO;AAAA;AAAA,6CA4BPhB,OAAO,CAACiB,mBAAR,CAA4BD,MAA5B,CA5BO;;AAAA;AA8BPE,YAAAA,cA9BO,GA8BU;AAAEF,cAAAA,MAAM,EAANA;AAAF,aA9BV;AAAA;AAAA,6CA+BPpB,OAAO,CAACuB,MAAR,CAAeD,cAAf,CA/BO;;AAAA;AAiCbtB,YAAAA,OAAO,CAACF,UAAR,CAAmB,kBAAnB,EAAuC0B,UAAvC,CAAkD,UAAAC,QAAQ,EAAI;AAC1DA,cAAAA,QAAQ,CAACC,UAAT,GAAsBC,OAAtB,CAA8B,iBAAMC,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BACtBA,MAAM,CAACC,IAAP,KAAgB,OADM;AAAA;AAAA;AAAA;;AAElBZ,wBAAAA,IAFkB,GAEXW,MAAM,CAAC7B,GAAP,CAAWkB,IAAX,EAFW;AAAA;AAAA,yDAGhBb,OAAO,CAAC0B,eAAR,CAAwB,IAAI7E,eAAJ,CAAoBgE,IAApB,CAAxB,CAHgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAA9B;AAMH,aAPD;AASAjD,YAAAA,gBAAgB,CAACoC,OAAD,CAAhB;;AA1Ca;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AA6CA,MAAM2B,YAAY,GAAG,SAAfA,YAAe,GAAM;AACvBnE,IAAAA,WAAW,CAACoE,cAAZ,GAA6BL,OAA7B,CAAqC,UAAAM,KAAK;AAAA,aAAIA,KAAK,CAACC,aAAN,EAAJ;AAAA,KAA1C;AACH,GAFD;;AAKA,MAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACrB,QAAI,CAAC/D,YAAL,EAAmB;AACf;AACH;;AACDR,IAAAA,WAAW,CAACwE,cAAZ,GAA6BT,OAA7B,CAAqC,UAAAM,KAAK,EAAI;AAE1CA,MAAAA,KAAK,CAACI,OAAN,GAAgB,CAACJ,KAAK,CAACI,OAAvB;AACA/D,MAAAA,UAAU,CAAC,CAAC2D,KAAK,CAACI,OAAR,CAAV;AACH,KAJD;AAKH,GATD;;AAYA,SACI;AAAA,eACI,KAAC,IAAD;AAAM,MAAA,KAAK,EAAEC,MAAM,CAACC,OAApB;AAAA;AAAA,MADJ,EAEI,MAAC,IAAD;AAAM,MAAA,KAAK,EAAED,MAAM,CAACC,OAApB;AAAA,4BAAsCC,MAAtC;AAAA,MAFJ,EAII,MAAC,IAAD;AAAM,MAAA,KAAK,EAAEF,MAAM,CAACG,WAApB;AAAA,iBACI,KAAC,IAAD;AAAM,QAAA,MAAM,EAAEH,MAAM,CAACI,eAArB;AAAA,kBACI,KAAC,MAAD;AAAQ,UAAA,KAAK,EAAC,oBAAd;AAAmC,UAAA,OAAO,EAAEjF;AAA5C;AADJ,QADJ,EAII,MAAC,IAAD;AAAM,QAAA,MAAM,EAAE6E,MAAM,CAACI,eAArB;AAAA,mBACK,CAAC9E,WAAD,IAAgB,KAAC,MAAD;AAAQ,UAAA,KAAK,EAAC,uBAAd;AAAsC,UAAA,OAAO,EAAEW;AAA/C,UADrB,EAEKX,WAAW,IAAI,KAAC,MAAD;AAAQ,UAAA,KAAK,EAAC,oBAAd;AAAmC,UAAA,OAAO,EAAE;AAAA,mBAAMgC,QAAQ,CAAC4C,MAAD,CAAd;AAAA,WAA5C;AAAoE,UAAA,QAAQ,EAAE,CAAC,CAACpE;AAAhF,UAFpB;AAAA,QAJJ;AAAA,MAJJ,EAcKR,WAAW,IACR,MAAC,IAAD;AAAM,MAAA,KAAK,EAAE0E,MAAM,CAACK,aAApB;AAAA,iBACI,KAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,eAAd;AAA8B,QAAA,OAAO,EAAEZ;AAAvC,QADJ,EAEI,KAAC,MAAD;AAAQ,QAAA,KAAK,GAAK1D,OAAO,GAAG,QAAH,GAAc,MAA1B,aAAb;AAAwD,QAAA,OAAO,EAAE8D,UAAjE;AAA6E,QAAA,QAAQ,EAAE,CAAC/D;AAAxF,QAFJ;AAAA,MAfR,EAqBI,MAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAEwE,QAAAA,OAAO,EAAE,MAAX;AAAmBC,QAAAA,IAAI,EAAE,CAAzB;AAA4BC,QAAAA,OAAO,EAAE;AAArC,OAAb;AAAA,iBACI,KAAC,IAAD;AAAM,QAAA,KAAK,EAAER,MAAM,CAACS,OAApB;AAAA,kBACKnF,WAAW,IAAI,KAAC,OAAD;AAAS,UAAA,KAAK,EAAE0E,MAAM,CAACU,GAAvB;AAA4B,UAAA,SAAS,EAAEpF,WAAW,IAAIA,WAAW,CAACqF,KAAZ;AAAtD;AADpB,QADJ,EAII,KAAC,IAAD;AAAM,QAAA,KAAK,EAAEX,MAAM,CAACS,OAApB;AAAA,kBACK3E,YAAY,IAAI,KAAC,OAAD;AAAS,UAAA,KAAK,EAAEkE,MAAM,CAACU,GAAvB;AAA4B,UAAA,SAAS,EAAE5E,YAAY,IAAIA,YAAY,CAAC6E,KAAb;AAAvD;AADrB,QAJJ;AAAA,MArBJ;AAAA,IADJ;AAiCH;AAED,IAAMX,MAAM,GAAGY,UAAU,CAACC,MAAX,CAAkB;AAC7BZ,EAAAA,OAAO,EAAE;AACLa,IAAAA,SAAS,EAAE,QADN;AAELC,IAAAA,QAAQ,EAAE;AAFL,GADoB;AAK7BN,EAAAA,OAAO,EAAE;AACLF,IAAAA,IAAI,EAAE,CADD;AAELS,IAAAA,cAAc,EAAE,QAFX;AAGLC,IAAAA,UAAU,EAAE,QAHP;AAILC,IAAAA,eAAe,EAAE,OAJZ;AAKLC,IAAAA,MAAM,EAAE;AALH,GALoB;AAY7BT,EAAAA,GAAG,EAAE;AACDH,IAAAA,IAAI,EAAE,CADL;AAEDa,IAAAA,KAAK,EAAE,MAFN;AAGDC,IAAAA,MAAM,EAAE;AAHP,GAZwB;AAiB7BhB,EAAAA,aAAa,EAAE;AACXe,IAAAA,KAAK,EAAE,MADI;AAEXE,IAAAA,aAAa,EAAE,KAFJ;AAGXN,IAAAA,cAAc,EAAE;AAHL,GAjBc;AAsB7Bb,EAAAA,WAAW,EAAE;AACTK,IAAAA,OAAO,EAAE,EADA;AAETY,IAAAA,KAAK,EAAE,MAFE;AAGTE,IAAAA,aAAa,EAAE,KAHN;AAITN,IAAAA,cAAc,EAAE;AAJP,GAtBgB;AA4B7BZ,EAAAA,eAAe,EAAE;AACbe,IAAAA,MAAM,EAAE;AADK;AA5BY,CAAlB,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Text, StyleSheet, Button, View } from 'react-native';\n\nimport { RTCPeerConnection, RTCView, mediaDevices, RTCIceCandidate, RTCSessionDescription } from 'react-native-webrtc';\nimport { db } from '../utilities/firebase';\n\nconst configuration = {\n    iceServers: [\n        {\n            urls: ['stun:stun1.l.google.com:19302', 'stun:stun2.l.google.com:19302'],\n        },\n    ],\n    iceCandidatePoolSize: 10,\n};\n\nexport default function JoinScreen(){\n\n    function onBackPress() {\n        if (cachedLocalPC) {\n            cachedLocalPC.removeStream(localStream);\n            cachedLocalPC.close();\n        }\n        setLocalStream();\n        setRemoteStream();\n        setCachedLocalPC();\n        // cleanup\n        setScreen(screens.ROOM);\n    }\n\n    const [localStream, setLocalStream] = useState();\n    const [remoteStream, setRemoteStream] = useState();\n    const [cachedLocalPC, setCachedLocalPC] = useState();\n\n    const [isMuted, setIsMuted] = useState(false);\n\n    useEffect(() => {\n        // startLocalStream();\n    }, []);\n\n    const startLocalStream = async () => {\n        // isFront will determine if the initial camera should face user or environment\n        const isFront = true;\n        const devices = await mediaDevices.enumerateDevices();\n\n        const facing = isFront ? 'front' : 'environment';\n        const videoSourceId = devices.find(device => device.kind === 'videoinput' && device.facing === facing);\n        const facingMode = isFront ? 'user' : 'environment';\n        const constraints = {\n            audio: true,\n            video: {\n                mandatory: {\n                    minWidth: 500, // Provide your own width, height and frame rate here\n                    minHeight: 300,\n                    minFrameRate: 30,\n                },\n                facingMode,\n                optional: videoSourceId ? [{ sourceId: videoSourceId }] : [],\n            },\n        };\n        const newStream = await mediaDevices.getUserMedia(constraints);\n        setLocalStream(newStream);\n    };\n\n    const joinCall = async id => {\n        const roomRef = await db.collection('rooms').doc(id);\n        const roomSnapshot = await roomRef.get();\n\n        if (!roomSnapshot.exists) return\n        const localPC = new RTCPeerConnection(configuration);\n        localPC.addStream(localStream);\n\n        const calleeCandidatesCollection = roomRef.collection('calleeCandidates');\n        localPC.onicecandidate = e => {\n            if (!e.candidate) {\n                console.log('Got final candidate!');\n                return;\n            }\n            calleeCandidatesCollection.add(e.candidate.toJSON());\n        };\n\n        localPC.onaddstream = e => {\n            if (e.stream && remoteStream !== e.stream) {\n                console.log('RemotePC received the stream join', e.stream);\n                setRemoteStream(e.stream);\n            }\n        };\n\n        const offer = roomSnapshot.data().offer;\n        await localPC.setRemoteDescription(new RTCSessionDescription(offer));\n\n        const answer = await localPC.createAnswer();\n        await localPC.setLocalDescription(answer);\n\n        const roomWithAnswer = { answer };\n        await roomRef.update(roomWithAnswer);\n\n        roomRef.collection('callerCandidates').onSnapshot(snapshot => {\n            snapshot.docChanges().forEach(async change => {\n                if (change.type === 'added') {\n                    let data = change.doc.data();\n                    await localPC.addIceCandidate(new RTCIceCandidate(data));\n                }\n            });\n        });\n\n        setCachedLocalPC(localPC);\n    };\n\n    const switchCamera = () => {\n        localStream.getVideoTracks().forEach(track => track._switchCamera());\n    };\n\n    // Mutes the local's outgoing audio\n    const toggleMute = () => {\n        if (!remoteStream) {\n            return;\n        }\n        localStream.getAudioTracks().forEach(track => {\n            // console.log(track.enabled ? 'muting' : 'unmuting', ' local track', track);\n            track.enabled = !track.enabled;\n            setIsMuted(!track.enabled);\n        });\n    };\n\n\n    return (\n        <>\n            <Text style={styles.heading} >Join Screen</Text>\n            <Text style={styles.heading} >Room : {roomId}</Text>\n\n            <View style={styles.callButtons} >\n                <View styles={styles.buttonContainer} >\n                    <Button title=\"Click to stop call\" onPress={onBackPress} />\n                </View>\n                <View styles={styles.buttonContainer} >\n                    {!localStream && <Button title='Click to start stream' onPress={startLocalStream} />}\n                    {localStream && <Button title='Click to join call' onPress={() => joinCall(roomId)} disabled={!!remoteStream} />}\n                </View>\n            </View>\n\n            {localStream && (\n                <View style={styles.toggleButtons}>\n                    <Button title='Switch camera' onPress={switchCamera} />\n                    <Button title={`${isMuted ? 'Unmute' : 'Mute'} stream`} onPress={toggleMute} disabled={!remoteStream} />\n                </View>\n            )}\n\n            <View style={{ display: 'flex', flex: 1, padding: 10 }} >\n                <View style={styles.rtcview}>\n                    {localStream && <RTCView style={styles.rtc} streamURL={localStream && localStream.toURL()} />}\n                </View>\n                <View style={styles.rtcview}>\n                    {remoteStream && <RTCView style={styles.rtc} streamURL={remoteStream && remoteStream.toURL()} />}\n                </View>\n            </View>\n\n        </>\n    )\n}\n\nconst styles = StyleSheet.create({\n    heading: {\n        alignSelf: 'center',\n        fontSize: 30,\n    },\n    rtcview: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: 'black',\n        margin: 5,\n    },\n    rtc: {\n        flex: 1,\n        width: '100%',\n        height: '100%',\n    },\n    toggleButtons: {\n        width: '100%',\n        flexDirection: 'row',\n        justifyContent: 'space-around',\n    },\n    callButtons: {\n        padding: 10,\n        width: '100%',\n        flexDirection: 'row',\n        justifyContent: 'space-around',\n    },\n    buttonContainer: {\n        margin: 5,\n    }\n});\n\n//export default JoinScreen;\n"]},"metadata":{},"sourceType":"module"}