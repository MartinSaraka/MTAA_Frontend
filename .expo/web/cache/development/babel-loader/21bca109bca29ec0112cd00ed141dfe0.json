{"ast":null,"code":"var mimeTypes = Object.freeze({\n  allFiles: '*/*',\n  audio: 'audio/*',\n  csv: 'text/csv',\n  doc: 'application/msword',\n  docx: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n  images: 'image/*',\n  pdf: 'application/pdf',\n  plainText: 'text/plain',\n  ppt: 'application/vnd.ms-powerpoint',\n  pptx: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n  video: 'video/*',\n  xls: 'application/vnd.ms-excel',\n  xlsx: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n  zip: 'application/zip'\n});\nvar utis = Object.freeze({\n  allFiles: 'public.item',\n  audio: 'public.audio',\n  csv: 'public.comma-separated-values-text',\n  doc: 'com.microsoft.word.doc',\n  docx: 'org.openxmlformats.wordprocessingml.document',\n  images: 'public.image',\n  pdf: 'com.adobe.pdf',\n  plainText: 'public.plain-text',\n  ppt: 'com.microsoft.powerpoint.ppt',\n  pptx: 'org.openxmlformats.presentationml.presentation',\n  video: 'public.movie',\n  xls: 'com.microsoft.excel.xls',\n  xlsx: 'org.openxmlformats.spreadsheetml.sheet',\n  zip: 'public.zip-archive'\n});\nvar extensions = Object.freeze({\n  allFiles: '*',\n  audio: '.3g2 .3gp .aac .adt .adts .aif .aifc .aiff .asf .au .m3u .m4a .m4b .mid .midi .mp2 .mp3 .mp4 .rmi .snd .wav .wax .wma',\n  csv: '.csv',\n  doc: '.doc',\n  docx: '.docx',\n  images: '.jpeg .jpg .png',\n  pdf: '.pdf',\n  plainText: '.txt',\n  ppt: '.ppt',\n  pptx: '.pptx',\n  video: '.mp4',\n  xls: '.xls',\n  xlsx: '.xlsx',\n  zip: '.zip .gz'\n});\nexport var perPlatformTypes = {\n  android: mimeTypes,\n  ios: utis,\n  windows: extensions,\n  macos: extensions,\n  web: extensions\n};\nvar mimesAndUtisAreEqual = true;\nvar mimesAndExtensionsAreEqual = true;\nexport var typesAreEqual = mimesAndUtisAreEqual && mimesAndExtensionsAreEqual;","map":{"version":3,"sources":["fileTypes.ts"],"names":["mimeTypes","allFiles","audio","csv","doc","docx","images","pdf","plainText","ppt","pptx","video","xls","xlsx","zip","utis","extensions","perPlatformTypes","android","ios","windows","macos","web","mimesAndUtisAreEqual","mimesAndExtensionsAreEqual","typesAreEqual"],"mappings":"AAAA,IAAMA,SAAS,GAAG,MAAM,CAAN,MAAA,CAAc;AAC9BC,EAAAA,QAAQ,EADsB,KAAA;AAE9BC,EAAAA,KAAK,EAFyB,SAAA;AAG9BC,EAAAA,GAAG,EAH2B,UAAA;AAI9BC,EAAAA,GAAG,EAJ2B,oBAAA;AAK9BC,EAAAA,IAAI,EAL0B,yEAAA;AAM9BC,EAAAA,MAAM,EANwB,SAAA;AAO9BC,EAAAA,GAAG,EAP2B,iBAAA;AAQ9BC,EAAAA,SAAS,EARqB,YAAA;AAS9BC,EAAAA,GAAG,EAT2B,+BAAA;AAU9BC,EAAAA,IAAI,EAV0B,2EAAA;AAW9BC,EAAAA,KAAK,EAXyB,SAAA;AAY9BC,EAAAA,GAAG,EAZ2B,0BAAA;AAa9BC,EAAAA,IAAI,EAb0B,mEAAA;AAc9BC,EAAAA,GAAG,EAAE;AAdyB,CAAd,CAAlB;AAiBA,IAAMC,IAAI,GAAG,MAAM,CAAN,MAAA,CAAc;AACzBd,EAAAA,QAAQ,EADiB,aAAA;AAEzBC,EAAAA,KAAK,EAFoB,cAAA;AAGzBC,EAAAA,GAAG,EAHsB,oCAAA;AAIzBC,EAAAA,GAAG,EAJsB,wBAAA;AAKzBC,EAAAA,IAAI,EALqB,8CAAA;AAMzBC,EAAAA,MAAM,EANmB,cAAA;AAOzBC,EAAAA,GAAG,EAPsB,eAAA;AAQzBC,EAAAA,SAAS,EARgB,mBAAA;AASzBC,EAAAA,GAAG,EATsB,8BAAA;AAUzBC,EAAAA,IAAI,EAVqB,gDAAA;AAWzBC,EAAAA,KAAK,EAXoB,cAAA;AAYzBC,EAAAA,GAAG,EAZsB,yBAAA;AAazBC,EAAAA,IAAI,EAbqB,wCAAA;AAczBC,EAAAA,GAAG,EAAE;AAdoB,CAAd,CAAb;AAiBA,IAAME,UAAU,GAAG,MAAM,CAAN,MAAA,CAAc;AAC/Bf,EAAAA,QAAQ,EADuB,GAAA;AAE/BC,EAAAA,KAAK,EAF0B,uHAAA;AAI/BC,EAAAA,GAAG,EAJ4B,MAAA;AAK/BC,EAAAA,GAAG,EAL4B,MAAA;AAM/BC,EAAAA,IAAI,EAN2B,OAAA;AAO/BC,EAAAA,MAAM,EAPyB,iBAAA;AAQ/BC,EAAAA,GAAG,EAR4B,MAAA;AAS/BC,EAAAA,SAAS,EATsB,MAAA;AAU/BC,EAAAA,GAAG,EAV4B,MAAA;AAW/BC,EAAAA,IAAI,EAX2B,OAAA;AAY/BC,EAAAA,KAAK,EAZ0B,MAAA;AAa/BC,EAAAA,GAAG,EAb4B,MAAA;AAc/BC,EAAAA,IAAI,EAd2B,OAAA;AAe/BC,EAAAA,GAAG,EAAE;AAf0B,CAAd,CAAnB;AAyBA,OAAO,IAAMG,gBAAgB,GAAG;AAC9BC,EAAAA,OAAO,EADuB,SAAA;AAE9BC,EAAAA,GAAG,EAF2B,IAAA;AAG9BC,EAAAA,OAAO,EAHuB,UAAA;AAK9BC,EAAAA,KAAK,EALyB,UAAA;AAM9BC,EAAAA,GAAG,EAAEN;AANyB,CAAzB;AAmBP,IAAMO,oBAAoE,GAA1E,IAAA;AACA,IAAMC,0BAAgF,GAAtF,IAAA;AACA,OAAO,IAAMC,aAAa,GAAGF,oBAAoB,IAA1C,0BAAA","sourcesContent":["const mimeTypes = Object.freeze({\n  allFiles: '*/*',\n  audio: 'audio/*',\n  csv: 'text/csv',\n  doc: 'application/msword',\n  docx: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n  images: 'image/*',\n  pdf: 'application/pdf',\n  plainText: 'text/plain',\n  ppt: 'application/vnd.ms-powerpoint',\n  pptx: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n  video: 'video/*',\n  xls: 'application/vnd.ms-excel',\n  xlsx: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n  zip: 'application/zip',\n} as const)\n\nconst utis = Object.freeze({\n  allFiles: 'public.item',\n  audio: 'public.audio',\n  csv: 'public.comma-separated-values-text',\n  doc: 'com.microsoft.word.doc',\n  docx: 'org.openxmlformats.wordprocessingml.document',\n  images: 'public.image',\n  pdf: 'com.adobe.pdf',\n  plainText: 'public.plain-text',\n  ppt: 'com.microsoft.powerpoint.ppt',\n  pptx: 'org.openxmlformats.presentationml.presentation',\n  video: 'public.movie',\n  xls: 'com.microsoft.excel.xls',\n  xlsx: 'org.openxmlformats.spreadsheetml.sheet',\n  zip: 'public.zip-archive',\n} as const)\n\nconst extensions = Object.freeze({\n  allFiles: '*',\n  audio:\n    '.3g2 .3gp .aac .adt .adts .aif .aifc .aiff .asf .au .m3u .m4a .m4b .mid .midi .mp2 .mp3 .mp4 .rmi .snd .wav .wax .wma',\n  csv: '.csv',\n  doc: '.doc',\n  docx: '.docx',\n  images: '.jpeg .jpg .png',\n  pdf: '.pdf',\n  plainText: '.txt',\n  ppt: '.ppt',\n  pptx: '.pptx',\n  video: '.mp4',\n  xls: '.xls',\n  xlsx: '.xlsx',\n  zip: '.zip .gz',\n} as const)\n\nexport type PlatformTypes = {\n  android: typeof mimeTypes\n  ios: typeof utis\n  windows: typeof extensions\n}\nexport type SupportedPlatforms = 'ios' | 'android' | 'windows'\n\nexport const perPlatformTypes = {\n  android: mimeTypes,\n  ios: utis,\n  windows: extensions,\n  // unsupported, but added to make TS happy\n  macos: extensions,\n  web: extensions,\n}\n\n// ensure shapes of platformTypes are the same: https://stackoverflow.com/a/67027347/2070942\n// let me know if there's a nicer way\n\ntype AssertEqualKeys<T1 extends object, T2 extends object> = [\n  keyof T1 extends keyof T2 ? 1 : 0,\n  keyof T2 extends keyof T1 ? 1 : 0,\n] extends [1, 1]\n  ? true\n  : false\n\nconst mimesAndUtisAreEqual: AssertEqualKeys<typeof mimeTypes, typeof utis> = true\nconst mimesAndExtensionsAreEqual: AssertEqualKeys<typeof mimeTypes, typeof extensions> = true\nexport const typesAreEqual = mimesAndUtisAreEqual && mimesAndExtensionsAreEqual\n"]},"metadata":{},"sourceType":"module"}