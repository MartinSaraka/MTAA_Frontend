{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport PermissionsAndroid from \"react-native-web/dist/exports/PermissionsAndroid\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar WebRTCModule = NativeModules.WebRTCModule;\n\nvar Permissions = function () {\n  function Permissions() {\n    _classCallCheck(this, Permissions);\n\n    _defineProperty(this, \"RESULT\", {\n      DENIED: 'denied',\n      GRANTED: 'granted',\n      PROMPT: 'prompt'\n    });\n\n    _defineProperty(this, \"VALID_PERMISSIONS\", ['camera', 'microphone']);\n\n    _defineProperty(this, \"_lastReq\", Promise.resolve());\n  }\n\n  _createClass(Permissions, [{\n    key: \"_requestPermissionAndroid\",\n    value: function _requestPermissionAndroid(perm) {\n      return new Promise(function (resolve, reject) {\n        PermissionsAndroid.request(perm).then(function (granted) {\n          return resolve(granted === PermissionsAndroid.RESULTS.GRANTED);\n        }, function () {\n          return resolve(false);\n        });\n      });\n    }\n  }, {\n    key: \"_validatePermissionDescriptior\",\n    value: function _validatePermissionDescriptior(permissionDesc) {\n      if (typeof permissionDesc !== 'object') {\n        throw new TypeError('Argument 1 of Permissions.query is not an object.');\n      }\n\n      if (typeof permissionDesc.name === 'undefined') {\n        throw new TypeError(\"Missing required 'name' member of PermissionDescriptor.\");\n      }\n\n      if (this.VALID_PERMISSIONS.indexOf(permissionDesc.name) === -1) {\n        throw new TypeError(\"'name' member of PermissionDescriptor is not a valid value for enumeration PermissionName.\");\n      }\n    }\n  }, {\n    key: \"query\",\n    value: function query(permissionDesc) {\n      var _this = this;\n\n      try {\n        this._validatePermissionDescriptior(permissionDesc);\n      } catch (e) {\n        return Promise.reject(e);\n      }\n\n      if (Platform.OS === 'android') {\n        var perm = permissionDesc.name === 'camera' ? PermissionsAndroid.PERMISSIONS.CAMERA : PermissionsAndroid.PERMISSIONS.RECORD_AUDIO;\n        return new Promise(function (resolve, reject) {\n          PermissionsAndroid.check(perm).then(function (granted) {\n            return resolve(granted ? _this.RESULT.GRANTED : _this.RESULT.PROMPT);\n          }, function () {\n            return resolve(_this.RESULT.PROMPT);\n          });\n        });\n      } else if (Platform.OS === 'ios' || Platform.OS === 'macos') {\n        return WebRTCModule.checkPermission(permissionDesc.name);\n      } else {\n        return Promise.reject(new TypeError('Unsupported platform.'));\n      }\n    }\n  }, {\n    key: \"request\",\n    value: function request(permissionDesc) {\n      var _this2 = this;\n\n      try {\n        this._validatePermissionDescriptior(permissionDesc);\n      } catch (e) {\n        return Promise.reject(e);\n      }\n\n      if (Platform.OS === 'android') {\n        var perm = permissionDesc.name === 'camera' ? PermissionsAndroid.PERMISSIONS.CAMERA : PermissionsAndroid.PERMISSIONS.RECORD_AUDIO;\n\n        var requestPermission = function requestPermission() {\n          return _this2._requestPermissionAndroid(perm);\n        };\n\n        this._lastReq = this._lastReq.then(requestPermission, requestPermission);\n        return this._lastReq;\n      } else if (Platform.OS === 'ios' || Platform.OS === 'macos') {\n        return WebRTCModule.requestPermission(permissionDesc.name);\n      } else {\n        return Promise.reject(new TypeError('Unsupported platform.'));\n      }\n    }\n  }]);\n\n  return Permissions;\n}();\n\nexport default new Permissions();","map":{"version":3,"sources":["Permissions.ts"],"names":["WebRTCModule","DENIED","GRANTED","PROMPT","Promise","_requestPermissionAndroid","PermissionsAndroid","granted","resolve","_validatePermissionDescriptior","permissionDesc","query","Platform","perm","request","requestPermission"],"mappings":"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","sourcesContent":["\nimport { NativeModules, Permission, PermissionsAndroid, Platform } from 'react-native';\n\nconst { WebRTCModule } = NativeModules;\n\n/**\n * Type declaration for a permissions descriptor.\n */\ntype PermissionDescriptor = {\n    name: string;\n};\n\n/**\n * Class implementing a subset of W3C's Permissions API as defined by:\n * https://www.w3.org/TR/permissions/\n */\nclass Permissions {\n    /**\n     * Possible result values for {@link query}, in accordance with:\n     * https://www.w3.org/TR/permissions/#status-of-a-permission\n     */\n    RESULT = {\n        DENIED: 'denied',\n        GRANTED: 'granted',\n        PROMPT: 'prompt'\n    };\n\n    /**\n     * This implementation only supports requesting these permissions, a subset\n     * of: https://www.w3.org/TR/permissions/#permission-registry\n     */\n    VALID_PERMISSIONS = ['camera', 'microphone'];\n\n    _lastReq: Promise<any> = Promise.resolve();\n\n    /**\n     * Helper for requesting Android permissions. On Android only one permission\n     * can be requested at a time (unless the multi-permission API is used,\n     * but we are not using that for symmetry with the W3C API for querying)\n     * so we'll queue them up.\n     *\n     * @param perm - The requested permission from\n     * {@link PermissionsAndroid.PERMISSIONS}\n     * https://facebook.github.io/react-native/docs/permissionsandroid#permissions-that-require-prompting-the-user\n     */\n    _requestPermissionAndroid(perm: Permission) {\n        return new Promise((resolve, reject) => {\n            PermissionsAndroid.request(perm).then(\n                granted => resolve(granted === PermissionsAndroid.RESULTS.GRANTED),\n                () => resolve(false)\n            );\n        });\n    }\n\n    /**\n     * Validates the given permission descriptor.\n     */\n    _validatePermissionDescriptior(permissionDesc) {\n        if (typeof permissionDesc !== 'object') {\n            throw new TypeError('Argument 1 of Permissions.query is not an object.');\n        }\n        if (typeof permissionDesc.name === 'undefined') {\n            throw new TypeError(\"Missing required 'name' member of PermissionDescriptor.\");\n        }\n        if (this.VALID_PERMISSIONS.indexOf(permissionDesc.name) === -1) {\n            throw new TypeError(\n                \"'name' member of PermissionDescriptor is not a valid value for enumeration PermissionName.\"\n            );\n        }\n    }\n\n    /**\n     * Method for querying the status of a permission, according to:\n     * https://www.w3.org/TR/permissions/#permissions-interface\n     */\n    query(permissionDesc: PermissionDescriptor) {\n        try {\n            this._validatePermissionDescriptior(permissionDesc);\n        } catch (e) {\n            return Promise.reject(e);\n        }\n        if (Platform.OS === 'android') {\n            const perm =\n                permissionDesc.name === 'camera'\n                    ? PermissionsAndroid.PERMISSIONS.CAMERA\n                    : PermissionsAndroid.PERMISSIONS.RECORD_AUDIO;\n            return new Promise((resolve, reject) => {\n                PermissionsAndroid.check(perm).then(\n                    granted => resolve(granted ? this.RESULT.GRANTED : this.RESULT.PROMPT),\n                    () => resolve(this.RESULT.PROMPT)\n                );\n            });\n        } else if (Platform.OS === 'ios' || Platform.OS === 'macos') {\n            return WebRTCModule.checkPermission(permissionDesc.name);\n        } else {\n            return Promise.reject(new TypeError('Unsupported platform.'));\n        }\n    }\n\n    /**\n     * Custom method NOT defined by W3C's permissions API, which allows the\n     * caller to request a permission.\n     */\n    request(permissionDesc: PermissionDescriptor) {\n        try {\n            this._validatePermissionDescriptior(permissionDesc);\n        } catch (e) {\n            return Promise.reject(e);\n        }\n        if (Platform.OS === 'android') {\n            const perm =\n                permissionDesc.name === 'camera'\n                    ? PermissionsAndroid.PERMISSIONS.CAMERA\n                    : PermissionsAndroid.PERMISSIONS.RECORD_AUDIO;\n            const requestPermission = () => this._requestPermissionAndroid(perm);\n            this._lastReq = this._lastReq.then(requestPermission, requestPermission);\n            return this._lastReq;\n        } else if (Platform.OS === 'ios' || Platform.OS === 'macos') {\n            return WebRTCModule.requestPermission(permissionDesc.name);\n        } else {\n            return Promise.reject(new TypeError('Unsupported platform.'));\n        }\n    }\n}\n\nexport default new Permissions();\n"]},"metadata":{},"sourceType":"module"}