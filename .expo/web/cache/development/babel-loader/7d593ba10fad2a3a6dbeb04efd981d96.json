{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport { createAppContainer } from \"react-navigation\";\nimport { createStackNavigator } from \"react-navigation-stack\";\nimport { createDrawerNavigator } from \"react-navigation-drawer\";\nimport AppLoading from \"expo-app-loading\";\nimport LandingPage from \"./src/screens/LandingPage\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar DrawerNavigation = createDrawerNavigator({\n  LandingPage: LandingPage\n});\nvar StackNavigation = createStackNavigator({\n  DrawerNavigation: {\n    screen: DrawerNavigation\n  },\n  LandingPage: LandingPage\n}, {\n  headerMode: \"none\"\n});\nvar AppContainer = createAppContainer(StackNavigation);\n\nfunction App() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoadingComplete = _useState2[0],\n      setLoadingComplete = _useState2[1];\n\n  if (!isLoadingComplete) {\n    return _jsx(AppLoading, {\n      startAsync: loadResourcesAsync,\n      onError: handleLoadingError,\n      onFinish: function onFinish() {\n        return handleFinishLoading(setLoadingComplete);\n      }\n    });\n  } else {\n    return isLoadingComplete ? _jsx(AppContainer, {}) : _jsx(AppLoading, {});\n  }\n}\n\nfunction loadResourcesAsync() {\n  return _regeneratorRuntime.async(function loadResourcesAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(Promise.all([Font.loadAsync({})]));\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction handleLoadingError(error) {\n  console.warn(error);\n}\n\nfunction handleFinishLoading(setLoadingComplete) {\n  setLoadingComplete(true);\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/sacre/AwesomeProject/App.js"],"names":["React","useState","createAppContainer","createStackNavigator","createDrawerNavigator","AppLoading","LandingPage","DrawerNavigation","StackNavigation","screen","headerMode","AppContainer","App","isLoadingComplete","setLoadingComplete","loadResourcesAsync","handleLoadingError","handleFinishLoading","Promise","all","Font","loadAsync","error","console","warn"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,kBAAT,QAAmC,kBAAnC;AACA,SAASC,oBAAT,QAAqC,wBAArC;AACA,SAASC,qBAAT,QAAsC,yBAAtC;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AAEA,OAAOC,WAAP;;AAEA,IAAMC,gBAAgB,GAAGH,qBAAqB,CAAC;AAAEE,EAAAA,WAAW,EAAEA;AAAf,CAAD,CAA9C;AAEA,IAAME,eAAe,GAAGL,oBAAoB,CAC1C;AACEI,EAAAA,gBAAgB,EAAE;AAChBE,IAAAA,MAAM,EAAEF;AADQ,GADpB;AAIED,EAAAA,WAAW,EAAEA;AAJf,CAD0C,EAO1C;AACEI,EAAAA,UAAU,EAAE;AADd,CAP0C,CAA5C;AAYA,IAAMC,YAAY,GAAGT,kBAAkB,CAACM,eAAD,CAAvC;;AAEA,SAASI,GAAT,GAAe;AACb,kBAAgDX,QAAQ,CAAC,KAAD,CAAxD;AAAA;AAAA,MAAOY,iBAAP;AAAA,MAA0BC,kBAA1B;;AACA,MAAI,CAACD,iBAAL,EAAwB;AACtB,WACE,KAAC,UAAD;AACE,MAAA,UAAU,EAAEE,kBADd;AAEE,MAAA,OAAO,EAAEC,kBAFX;AAGE,MAAA,QAAQ,EAAE;AAAA,eAAMC,mBAAmB,CAACH,kBAAD,CAAzB;AAAA;AAHZ,MADF;AAOD,GARD,MAQO;AACL,WAAOD,iBAAiB,GAAG,KAAC,YAAD,KAAH,GAAsB,KAAC,UAAD,KAA9C;AACD;AACF;;AACD,SAAeE,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACQG,OAAO,CAACC,GAAR,CAAY,CAACC,IAAI,CAACC,SAAL,CAAe,EAAf,CAAD,CAAZ,CADR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,SAASL,kBAAT,CAA4BM,KAA5B,EAAmC;AACjCC,EAAAA,OAAO,CAACC,IAAR,CAAaF,KAAb;AACD;;AAED,SAASL,mBAAT,CAA6BH,kBAA7B,EAAiD;AAC/CA,EAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD;;AAED,eAAeF,GAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { createAppContainer } from \"react-navigation\";\nimport { createStackNavigator } from \"react-navigation-stack\";\nimport { createDrawerNavigator } from \"react-navigation-drawer\";\nimport AppLoading from \"expo-app-loading\";\n\nimport LandingPage from \"./src/screens/LandingPage\";\n\nconst DrawerNavigation = createDrawerNavigator({ LandingPage: LandingPage });\n\nconst StackNavigation = createStackNavigator(\n  {\n    DrawerNavigation: {\n      screen: DrawerNavigation\n    },\n    LandingPage: LandingPage\n  },\n  {\n    headerMode: \"none\"\n  }\n);\n\nconst AppContainer = createAppContainer(StackNavigation);\n\nfunction App() {\n  const [isLoadingComplete, setLoadingComplete] = useState(false);\n  if (!isLoadingComplete) {\n    return (\n      <AppLoading\n        startAsync={loadResourcesAsync}\n        onError={handleLoadingError}\n        onFinish={() => handleFinishLoading(setLoadingComplete)}\n      />\n    );\n  } else {\n    return isLoadingComplete ? <AppContainer /> : <AppLoading />;\n  }\n}\nasync function loadResourcesAsync() {\n  await Promise.all([Font.loadAsync({})]);\n}\nfunction handleLoadingError(error) {\n  console.warn(error);\n}\n\nfunction handleFinishLoading(setLoadingComplete) {\n  setLoadingComplete(true);\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}