{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport { defineCustomEventTarget } from 'event-target-shim';\nimport _getDisplayMedia from \"./getDisplayMedia\";\nimport _getUserMedia from \"./getUserMedia\";\nvar WebRTCModule = NativeModules.WebRTCModule;\nvar MEDIA_DEVICES_EVENTS = ['devicechange'];\n\nvar MediaDevices = function (_defineCustomEventTar) {\n  _inherits(MediaDevices, _defineCustomEventTar);\n\n  var _super = _createSuper(MediaDevices);\n\n  function MediaDevices() {\n    _classCallCheck(this, MediaDevices);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(MediaDevices, [{\n    key: \"enumerateDevices\",\n    value: function enumerateDevices() {\n      return new Promise(function (resolve) {\n        return WebRTCModule.enumerateDevices(resolve);\n      });\n    }\n  }, {\n    key: \"getDisplayMedia\",\n    value: function getDisplayMedia() {\n      return _getDisplayMedia();\n    }\n  }, {\n    key: \"getUserMedia\",\n    value: function getUserMedia(constraints) {\n      return _getUserMedia(constraints);\n    }\n  }]);\n\n  return MediaDevices;\n}(defineCustomEventTarget.apply(void 0, MEDIA_DEVICES_EVENTS));\n\nexport default new MediaDevices();","map":{"version":3,"sources":["MediaDevices.ts"],"names":["WebRTCModule","MEDIA_DEVICES_EVENTS","defineCustomEventTarget","enumerateDevices","resolve","getDisplayMedia","getUserMedia"],"mappings":";;;;;;;;;;;AAEA,SAAA,uBAAA,QAAA,mBAAA;AAEA,OAAA,gBAAA;AACA,OAAA,aAAA;AAEA,IAAQA,YAAR,GAAA,aAAA,CAAQA,YAAR;AAEA,IAAMC,oBAAoB,GAAG,CAA7B,cAA6B,CAA7B;;IAEA,Y;;;;;;;;;;;;;WAKIE,4BAAmB;AACf,aAAO,IAAA,OAAA,CAAYC,UAAAA,OAAO;AAAA,eAAIJ,YAAY,CAAZA,gBAAAA,CAA9B,OAA8BA,CAAJ;AAAA,OAAnB,CAAP;AACH;;;WAQDK,2BAAkB;AACd,aAAOA,gBAAP,EAAA;AACH;;;WAUDC,sBAAY,WAAZA,EAA0B;AACtB,aAAOA,aAAY,CAAnB,WAAmB,CAAnB;AACH;;;;EA7BsBJ,uBAAuB,MAAvBA,SAA3B,oBAA2BA,C;;AAgC3B,eAAe,IAAf,YAAe,EAAf","sourcesContent":["\nimport { NativeModules } from 'react-native';\nimport { defineCustomEventTarget } from 'event-target-shim';\n\nimport getDisplayMedia from './getDisplayMedia';\nimport getUserMedia from './getUserMedia';\n\nconst { WebRTCModule } = NativeModules;\n\nconst MEDIA_DEVICES_EVENTS = ['devicechange'];\n\nclass MediaDevices extends defineCustomEventTarget(...MEDIA_DEVICES_EVENTS) {\n    /**\n     * W3C \"Media Capture and Streams\" compatible {@code enumerateDevices}\n     * implementation.\n     */\n    enumerateDevices() {\n        return new Promise(resolve => WebRTCModule.enumerateDevices(resolve));\n    }\n\n    /**\n     * W3C \"Screen Capture\" compatible {@code getDisplayMedia} implementation.\n     * See: https://w3c.github.io/mediacapture-screen-share/\n     *\n     * @returns {Promise}\n     */\n    getDisplayMedia() {\n        return getDisplayMedia();\n    }\n\n    /**\n     * W3C \"Media Capture and Streams\" compatible {@code getUserMedia}\n     * implementation.\n     * See: https://www.w3.org/TR/mediacapture-streams/#dom-mediadevices-enumeratedevices\n     *\n     * @param {*} constraints\n     * @returns {Promise}\n     */\n    getUserMedia(constraints) {\n        return getUserMedia(constraints);\n    }\n}\n\nexport default new MediaDevices();\n"]},"metadata":{},"sourceType":"module"}