{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar DEFAULT_AUDIO_CONSTRAINTS = {};\nvar DEFAULT_VIDEO_CONSTRAINTS = {\n  facingMode: 'user',\n  frameRate: 30,\n  height: 720,\n  width: 1280\n};\nvar ASPECT_RATIO = 16 / 9;\nvar STANDARD_OA_OPTIONS = {\n  icerestart: 'IceRestart',\n  offertoreceiveaudio: 'OfferToReceiveAudio',\n  offertoreceivevideo: 'OfferToReceiveVideo',\n  voiceactivitydetection: 'VoiceActivityDetection'\n};\n\nfunction getDefaultMediaConstraints(mediaType) {\n  switch (mediaType) {\n    case 'audio':\n      return DEFAULT_AUDIO_CONSTRAINTS;\n\n    case 'video':\n      return DEFAULT_VIDEO_CONSTRAINTS;\n\n    default:\n      throw new TypeError(\"Invalid media type: \" + mediaType);\n  }\n}\n\nfunction extractString(constraints, prop) {\n  var value = constraints[prop];\n  var type = typeof value;\n\n  if (type === 'object') {\n    for (var _i = 0, _arr = ['exact', 'ideal']; _i < _arr.length; _i++) {\n      var v = _arr[_i];\n\n      if (value[v]) {\n        return value[v];\n      }\n    }\n  } else if (type === 'string') {\n    return value;\n  }\n}\n\nfunction extractNumber(constraints, prop) {\n  var value = constraints[prop];\n  var type = typeof value;\n\n  if (type === 'number') {\n    return Number.parseInt(value);\n  } else if (type === 'object') {\n    for (var _i2 = 0, _arr2 = ['exact', 'ideal', 'min', 'max']; _i2 < _arr2.length; _i2++) {\n      var v = _arr2[_i2];\n\n      if (value[v]) {\n        return Number.parseInt(value[v]);\n      }\n    }\n  }\n}\n\nfunction normalizeMediaConstraints(constraints, mediaType) {\n  switch (mediaType) {\n    case 'audio':\n      return constraints;\n\n    case 'video':\n      {\n        var c;\n\n        if (constraints.mandatory) {\n          c = {\n            deviceId: extractString(constraints.optional || {}, 'sourceId'),\n            facingMode: extractString(constraints, 'facingMode'),\n            frameRate: extractNumber(constraints.mandatory, 'minFrameRate'),\n            height: extractNumber(constraints.mandatory, 'minHeight'),\n            width: extractNumber(constraints.mandatory, 'minWidth')\n          };\n        } else {\n          c = {\n            deviceId: extractString(constraints, 'deviceId'),\n            facingMode: extractString(constraints, 'facingMode'),\n            frameRate: extractNumber(constraints, 'frameRate'),\n            height: extractNumber(constraints, 'height'),\n            width: extractNumber(constraints, 'width')\n          };\n        }\n\n        if (!c.deviceId) {\n          delete c.deviceId;\n        }\n\n        if (!c.facingMode || c.facingMode !== 'user' && c.facingMode !== 'environment') {\n          c.facingMode = DEFAULT_VIDEO_CONSTRAINTS.facingMode;\n        }\n\n        if (!c.frameRate) {\n          c.frameRate = DEFAULT_VIDEO_CONSTRAINTS.frameRate;\n        }\n\n        if (!c.height && !c.width) {\n          c.height = DEFAULT_VIDEO_CONSTRAINTS.height;\n          c.width = DEFAULT_VIDEO_CONSTRAINTS.width;\n        } else if (!c.height) {\n          c.height = Math.round(c.width / ASPECT_RATIO);\n        } else if (!c.width) {\n          c.width = Math.round(c.height * ASPECT_RATIO);\n        }\n\n        return c;\n      }\n\n    default:\n      throw new TypeError(\"Invalid media type: \" + mediaType);\n  }\n}\n\nfunction chr4() {\n  return Math.random().toString(16).slice(-4);\n}\n\nexport function uniqueID() {\n  return \"\" + chr4() + chr4() + \"-\" + chr4() + \"-\" + chr4() + \"-\" + chr4() + \"-\" + chr4() + chr4() + chr4();\n}\nexport function deepClone(obj) {\n  return JSON.parse(JSON.stringify(obj));\n}\nexport function normalizeOfferAnswerOptions() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var newOptions = {};\n\n  if (!options) {\n    return newOptions;\n  }\n\n  if (options.mandatory) {\n    options = options.mandatory;\n  }\n\n  for (var _i3 = 0, _Object$entries = Object.entries(options); _i3 < _Object$entries.length; _i3++) {\n    var _ref = _Object$entries[_i3];\n\n    var _ref2 = _slicedToArray(_ref, 2);\n\n    var key = _ref2[0];\n    var value = _ref2[1];\n    var newKey = STANDARD_OA_OPTIONS[key.toLowerCase()];\n\n    if (newKey) {\n      newOptions[newKey] = String(Boolean(value));\n    }\n  }\n\n  return newOptions;\n}\nexport function normalizeConstraints(constraints) {\n  var c = deepClone(constraints);\n\n  for (var _i4 = 0, _arr3 = ['audio', 'video']; _i4 < _arr3.length; _i4++) {\n    var mediaType = _arr3[_i4];\n    var mediaTypeConstraints = c[mediaType];\n    var typeofMediaTypeConstraints = typeof mediaTypeConstraints;\n\n    if (typeofMediaTypeConstraints !== 'undefined') {\n      if (typeofMediaTypeConstraints === 'boolean') {\n        if (mediaTypeConstraints) {\n          c[mediaType] = getDefaultMediaConstraints(mediaType);\n        }\n      } else if (typeofMediaTypeConstraints === 'object') {\n        c[mediaType] = normalizeMediaConstraints(mediaTypeConstraints, mediaType);\n      } else {\n        throw new TypeError(\"constraints.\" + mediaType + \" is neither a boolean nor a dictionary\");\n      }\n    }\n  }\n\n  return c;\n}","map":{"version":3,"sources":["RTCUtil.ts"],"names":["DEFAULT_AUDIO_CONSTRAINTS","DEFAULT_VIDEO_CONSTRAINTS","facingMode","frameRate","height","width","ASPECT_RATIO","STANDARD_OA_OPTIONS","icerestart","offertoreceiveaudio","offertoreceivevideo","voiceactivitydetection","value","constraints","type","v","Number","c","deviceId","extractString","extractNumber","Math","chr4","JSON","options","newOptions","Object","newKey","key","String","Boolean","deepClone","mediaType","mediaTypeConstraints","typeofMediaTypeConstraints","getDefaultMediaConstraints","normalizeMediaConstraints"],"mappings":"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","sourcesContent":["\nconst DEFAULT_AUDIO_CONSTRAINTS = {};\n\nconst DEFAULT_VIDEO_CONSTRAINTS = {\n    facingMode: 'user',\n    frameRate: 30,\n    height: 720,\n    width: 1280\n};\n\nconst ASPECT_RATIO = 16 / 9;\n\nconst STANDARD_OA_OPTIONS = {\n    icerestart: 'IceRestart',\n    offertoreceiveaudio: 'OfferToReceiveAudio',\n    offertoreceivevideo: 'OfferToReceiveVideo',\n    voiceactivitydetection: 'VoiceActivityDetection'\n};\n\nfunction getDefaultMediaConstraints(mediaType) {\n    switch (mediaType) {\n        case 'audio':\n            return DEFAULT_AUDIO_CONSTRAINTS;\n        case 'video':\n            return DEFAULT_VIDEO_CONSTRAINTS;\n        default:\n            throw new TypeError(`Invalid media type: ${mediaType}`);\n    }\n}\n\nfunction extractString(constraints, prop) {\n    const value = constraints[prop];\n    const type = typeof value;\n\n    if (type === 'object') {\n        for (const v of ['exact', 'ideal']) {\n            if (value[v]) {\n                return value[v];\n            }\n        }\n    } else if (type === 'string') {\n        return value;\n    }\n}\n\nfunction extractNumber(constraints, prop) {\n    const value = constraints[prop];\n    const type = typeof value;\n\n    if (type === 'number') {\n        return Number.parseInt(value);\n    } else if (type === 'object') {\n        for (const v of ['exact', 'ideal', 'min', 'max']) {\n            if (value[v]) {\n                return Number.parseInt(value[v]);\n            }\n        }\n    }\n}\n\nfunction normalizeMediaConstraints(constraints, mediaType) {\n    switch (mediaType) {\n        case 'audio':\n            return constraints;\n        case 'video': {\n            let c;\n            if (constraints.mandatory) {\n                // Old style.\n                c = {\n                    deviceId: extractString(constraints.optional || {}, 'sourceId'),\n                    facingMode: extractString(constraints, 'facingMode'),\n                    frameRate: extractNumber(constraints.mandatory, 'minFrameRate'),\n                    height: extractNumber(constraints.mandatory, 'minHeight'),\n                    width: extractNumber(constraints.mandatory, 'minWidth')\n                };\n            } else {\n                // New style.\n                c = {\n                    deviceId: extractString(constraints, 'deviceId'),\n                    facingMode: extractString(constraints, 'facingMode'),\n                    frameRate: extractNumber(constraints, 'frameRate'),\n                    height: extractNumber(constraints, 'height'),\n                    width: extractNumber(constraints, 'width')\n                };\n            }\n\n            if (!c.deviceId) {\n                delete c.deviceId;\n            }\n\n            if (!c.facingMode || (c.facingMode !== 'user' && c.facingMode !== 'environment')) {\n                c.facingMode = DEFAULT_VIDEO_CONSTRAINTS.facingMode;\n            }\n\n            if (!c.frameRate) {\n                c.frameRate = DEFAULT_VIDEO_CONSTRAINTS.frameRate;\n            }\n\n            if (!c.height && !c.width) {\n                c.height = DEFAULT_VIDEO_CONSTRAINTS.height;\n                c.width = DEFAULT_VIDEO_CONSTRAINTS.width;\n            } else if (!c.height) {\n                c.height = Math.round(c.width / ASPECT_RATIO);\n            } else if (!c.width) {\n                c.width = Math.round(c.height * ASPECT_RATIO);\n            }\n\n            return c;\n        }\n        default:\n            throw new TypeError(`Invalid media type: ${mediaType}`);\n    }\n}\n\n/**\n * Utility for creating short random strings from float point values.\n * We take 4 characters from the end after converting to a string.\n * Conversion to string gives us some letters as we don't want just numbers.\n * Should be suitable to pass for enough randomness.\n *\n * @return {String} 4 random characters\n */\nfunction chr4() {\n    return Math.random().toString(16).slice(-4);\n}\n\n/**\n * Put together a random string in UUIDv4 format {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}\n *\n * @return {String} uuidv4\n */\nexport function uniqueID() {\n    return `${chr4()}${chr4()}-${chr4()}-${chr4()}-${chr4()}-${chr4()}${chr4()}${chr4()}`;\n}\n\n/**\n * Utility for deep cloning an object. Object.assign() only does a shallow copy.\n *\n * @param {Object} obj - object to be cloned\n * @return {Object} cloned obj\n */\nexport function deepClone(obj) {\n    return JSON.parse(JSON.stringify(obj));\n}\n\ninterface Constraints {\n    mandatory?: object;\n}\n\n/**\n * Normalize options passed to createOffer() / createAnswer().\n *\n * @param {Object} options - user supplied options\n * @return {Object} newOptions - normalized options\n */\nexport function normalizeOfferAnswerOptions(options: Constraints = {}) {\n    const newOptions = {};\n\n    if (!options) {\n        return newOptions;\n    }\n\n    // Support legacy constraints.\n    if (options.mandatory) {\n        options = options.mandatory;\n    }\n\n    // Convert standard options into WebRTC internal constant names.\n    // See: https://github.com/jitsi/webrtc/blob/0cd6ce4de669bed94ba47b88cb71b9be0341bb81/sdk/media_constraints.cc#L113\n    for (const [key, value] of Object.entries(options)) {\n        const newKey = STANDARD_OA_OPTIONS[key.toLowerCase()];\n        if (newKey) {\n            newOptions[newKey] = String(Boolean(value));\n        }\n    }\n\n    return newOptions;\n}\n\n/**\n * Normalize the given constraints in something we can work with.\n */\nexport function normalizeConstraints(constraints) {\n    const c = deepClone(constraints);\n\n    for (const mediaType of ['audio', 'video']) {\n        const mediaTypeConstraints = c[mediaType];\n        const typeofMediaTypeConstraints = typeof mediaTypeConstraints;\n\n        if (typeofMediaTypeConstraints !== 'undefined') {\n            if (typeofMediaTypeConstraints === 'boolean') {\n                if (mediaTypeConstraints) {\n                    c[mediaType] = getDefaultMediaConstraints(mediaType);\n                }\n            } else if (typeofMediaTypeConstraints === 'object') {\n                c[mediaType] = normalizeMediaConstraints(mediaTypeConstraints, mediaType);\n            } else {\n                throw new TypeError(`constraints.${mediaType} is neither a boolean nor a dictionary`);\n            }\n        }\n    }\n\n    return c;\n}\n"]},"metadata":{},"sourceType":"module"}