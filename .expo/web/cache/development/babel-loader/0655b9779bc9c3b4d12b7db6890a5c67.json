{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport { defineCustomEventTarget } from 'event-target-shim';\nimport { deepClone } from \"./RTCUtil\";\nvar WebRTCModule = NativeModules.WebRTCModule;\nvar MEDIA_STREAM_TRACK_EVENTS = ['ended', 'mute', 'unmute'];\n\nvar MediaStreamTrack = function (_defineCustomEventTar) {\n  _inherits(MediaStreamTrack, _defineCustomEventTar);\n\n  var _super = _createSuper(MediaStreamTrack);\n\n  function MediaStreamTrack(info) {\n    var _this;\n\n    _classCallCheck(this, MediaStreamTrack);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"_constraints\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_enabled\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_settings\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_muted\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"id\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"kind\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"label\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"readyState\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"remote\", void 0);\n\n    _this._constraints = info.constraints || {};\n    _this._enabled = info.enabled;\n    _this._settings = info.settings || {};\n    _this._muted = false;\n    _this.id = info.id;\n    _this.kind = info.kind;\n    _this.label = info.label;\n    _this.remote = info.remote;\n\n    var _readyState = info.readyState.toLowerCase();\n\n    _this.readyState = _readyState === 'initializing' || _readyState === 'live' ? 'live' : 'ended';\n    return _this;\n  }\n\n  _createClass(MediaStreamTrack, [{\n    key: \"enabled\",\n    get: function get() {\n      return this._enabled;\n    },\n    set: function set(enabled) {\n      if (enabled === this._enabled) {\n        return;\n      }\n\n      WebRTCModule.mediaStreamTrackSetEnabled(this.id, !this._enabled);\n      this._enabled = !this._enabled;\n    }\n  }, {\n    key: \"muted\",\n    get: function get() {\n      return this._muted;\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      WebRTCModule.mediaStreamTrackSetEnabled(this.id, false);\n      this.readyState = 'ended';\n    }\n  }, {\n    key: \"_switchCamera\",\n    value: function _switchCamera() {\n      if (this.remote) {\n        throw new Error('Not implemented for remote tracks');\n      }\n\n      if (this.kind !== 'video') {\n        throw new Error('Only implemented for video tracks');\n      }\n\n      WebRTCModule.mediaStreamTrackSwitchCamera(this.id);\n    }\n  }, {\n    key: \"applyConstraints\",\n    value: function applyConstraints() {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"getCapabilities\",\n    value: function getCapabilities() {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"getConstraints\",\n    value: function getConstraints() {\n      return deepClone(this._constraints);\n    }\n  }, {\n    key: \"getSettings\",\n    value: function getSettings() {\n      return deepClone(this._settings);\n    }\n  }, {\n    key: \"release\",\n    value: function release() {\n      WebRTCModule.mediaStreamTrackRelease(this.id);\n    }\n  }]);\n\n  return MediaStreamTrack;\n}(defineCustomEventTarget.apply(void 0, MEDIA_STREAM_TRACK_EVENTS));\n\nexport default MediaStreamTrack;","map":{"version":3,"sources":["MediaStreamTrack.ts"],"names":["WebRTCModule","MEDIA_STREAM_TRACK_EVENTS","defineCustomEventTarget","constructor","info","_readyState","enabled","muted","stop","_switchCamera","applyConstraints","clone","getCapabilities","getConstraints","deepClone","getSettings","release"],"mappings":"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","sourcesContent":["\nimport { NativeModules } from 'react-native';\nimport { defineCustomEventTarget } from 'event-target-shim';\n\nimport { deepClone } from './RTCUtil';\n\nconst { WebRTCModule } = NativeModules;\n\nconst MEDIA_STREAM_TRACK_EVENTS = ['ended', 'mute', 'unmute'];\n\ntype MediaStreamTrackState = 'live' | 'ended';\n\nclass MediaStreamTrack extends defineCustomEventTarget(...MEDIA_STREAM_TRACK_EVENTS) {\n    _constraints: object;\n    _enabled: boolean;\n    _settings: object;\n    _muted: boolean;\n\n    id: string;\n    kind: string;\n    label: string;\n    readyState: MediaStreamTrackState;\n    remote: boolean;\n\n    constructor(info) {\n        super();\n\n        this._constraints = info.constraints || {};\n        this._enabled = info.enabled;\n        this._settings = info.settings || {};\n        this._muted = false;\n\n        this.id = info.id;\n        this.kind = info.kind;\n        this.label = info.label;\n        this.remote = info.remote;\n\n        const _readyState = info.readyState.toLowerCase();\n        this.readyState = _readyState === 'initializing' || _readyState === 'live' ? 'live' : 'ended';\n    }\n\n    get enabled(): boolean {\n        return this._enabled;\n    }\n\n    set enabled(enabled: boolean) {\n        if (enabled === this._enabled) {\n            return;\n        }\n        WebRTCModule.mediaStreamTrackSetEnabled(this.id, !this._enabled);\n        this._enabled = !this._enabled;\n    }\n\n    get muted(): boolean {\n        return this._muted;\n    }\n\n    stop() {\n        WebRTCModule.mediaStreamTrackSetEnabled(this.id, false);\n        this.readyState = 'ended';\n        // TODO: save some stopped flag?\n    }\n\n    /**\n     * Private / custom API for switching the cameras on the fly, without the\n     * need for adding / removing tracks or doing any SDP renegotiation.\n     *\n     * This is how the reference application (AppRTCMobile) implements camera\n     * switching.\n     */\n    _switchCamera() {\n        if (this.remote) {\n            throw new Error('Not implemented for remote tracks');\n        }\n        if (this.kind !== 'video') {\n            throw new Error('Only implemented for video tracks');\n        }\n        WebRTCModule.mediaStreamTrackSwitchCamera(this.id);\n    }\n\n    applyConstraints() {\n        throw new Error('Not implemented.');\n    }\n\n    clone() {\n        throw new Error('Not implemented.');\n    }\n\n    getCapabilities() {\n        throw new Error('Not implemented.');\n    }\n\n    getConstraints() {\n        return deepClone(this._constraints);\n    }\n\n    getSettings() {\n        return deepClone(this._settings);\n    }\n\n    release() {\n        WebRTCModule.mediaStreamTrackRelease(this.id);\n    }\n}\n\nexport default MediaStreamTrack;\n"]},"metadata":{},"sourceType":"module"}