{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, createRef } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport AsyncStorage from '@react-native-community/async-storage';\nimport Loader from \"./Components/Loader\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar LoginScreen = function LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      userEmail = _useState2[0],\n      setUserEmail = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      userPassword = _useState4[0],\n      setUserPassword = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loading = _useState6[0],\n      setLoading = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      errortext = _useState8[0],\n      setErrortext = _useState8[1];\n\n  var passwordInputRef = createRef();\n\n  var handleSubmitPress = function handleSubmitPress() {\n    setErrortext('');\n\n    if (!userEmail) {\n      alert('Please fill Email');\n      return;\n    }\n\n    if (!userPassword) {\n      alert('Please fill Password');\n      return;\n    }\n\n    setLoading(true);\n    var dataToSend = {\n      email: userEmail,\n      password: userPassword\n    };\n    var formBody = [];\n\n    for (var key in dataToSend) {\n      var encodedKey = encodeURIComponent(key);\n      var encodedValue = encodeURIComponent(dataToSend[key]);\n      formBody.push(encodedKey + '=' + encodedValue);\n    }\n\n    formBody = formBody.join('&');\n    fetch('http://localhost:3000/api/user/login', {\n      method: 'POST',\n      body: formBody,\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (responseJson) {\n      setLoading(false);\n      console.log(responseJson);\n\n      if (responseJson.status === 'success') {\n        AsyncStorage.setItem('user_id', responseJson.data.email);\n        console.log(responseJson.data.email);\n        navigation.replace('DrawerNavigationRoutes');\n      } else {\n        setErrortext(responseJson.msg);\n        console.log('Please check your email id or password');\n      }\n    }).catch(function (error) {\n      setLoading(false);\n      console.error(error);\n    });\n  };\n\n  return _jsxs(View, {\n    style: styles.mainBody,\n    children: [_jsx(Loader, {\n      loading: loading\n    }), _jsx(ScrollView, {\n      keyboardShouldPersistTaps: \"handled\",\n      contentContainerStyle: {\n        flex: 1,\n        justifyContent: 'center',\n        alignContent: 'center'\n      },\n      children: _jsx(View, {\n        children: _jsxs(KeyboardAvoidingView, {\n          enabled: true,\n          children: [_jsx(View, {\n            style: {\n              alignItems: 'center'\n            }\n          }), _jsx(View, {\n            style: styles.SectionStyle,\n            children: _jsx(TextInput, {\n              style: styles.inputStyle,\n              onChangeText: function onChangeText(UserEmail) {\n                return setUserEmail(UserEmail);\n              },\n              placeholder: \"Enter Email\",\n              placeholderTextColor: \"#8b9cb5\",\n              autoCapitalize: \"none\",\n              keyboardType: \"email-address\",\n              returnKeyType: \"next\",\n              onSubmitEditing: function onSubmitEditing() {\n                return passwordInputRef.current && passwordInputRef.current.focus();\n              },\n              underlineColorAndroid: \"#f000\",\n              blurOnSubmit: false\n            })\n          }), _jsx(View, {\n            style: styles.SectionStyle,\n            children: _jsx(TextInput, {\n              style: styles.inputStyle,\n              onChangeText: function onChangeText(UserPassword) {\n                return setUserPassword(UserPassword);\n              },\n              placeholder: \"Enter Password\",\n              placeholderTextColor: \"#8b9cb5\",\n              keyboardType: \"default\",\n              ref: passwordInputRef,\n              onSubmitEditing: Keyboard.dismiss,\n              blurOnSubmit: false,\n              secureTextEntry: true,\n              underlineColorAndroid: \"#f000\",\n              returnKeyType: \"next\"\n            })\n          }), errortext != '' ? _jsx(Text, {\n            style: styles.errorTextStyle,\n            children: errortext\n          }) : null, _jsx(TouchableOpacity, {\n            style: styles.buttonStyle,\n            activeOpacity: 0.5,\n            onPress: handleSubmitPress,\n            children: _jsx(Text, {\n              style: styles.buttonTextStyle,\n              children: \"LOGIN\"\n            })\n          }), _jsx(Text, {\n            style: styles.registerTextStyle,\n            onPress: function onPress() {\n              return navigation.navigate('RegisterPage');\n            },\n            children: \"New Here ? Register\"\n          })]\n        })\n      })\n    })]\n  });\n};\n\nexport default LoginPage;\nvar styles = StyleSheet.create({\n  mainBody: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#307ecc',\n    alignContent: 'center'\n  },\n  SectionStyle: {\n    flexDirection: 'row',\n    height: 40,\n    marginTop: 20,\n    marginLeft: 35,\n    marginRight: 35,\n    margin: 10\n  },\n  buttonStyle: {\n    backgroundColor: '#7DE24E',\n    borderWidth: 0,\n    color: '#FFFFFF',\n    borderColor: '#7DE24E',\n    height: 40,\n    alignItems: 'center',\n    borderRadius: 30,\n    marginLeft: 35,\n    marginRight: 35,\n    marginTop: 20,\n    marginBottom: 25\n  },\n  buttonTextStyle: {\n    color: '#FFFFFF',\n    paddingVertical: 10,\n    fontSize: 16\n  },\n  inputStyle: {\n    flex: 1,\n    color: 'white',\n    paddingLeft: 15,\n    paddingRight: 15,\n    borderWidth: 1,\n    borderRadius: 30,\n    borderColor: '#dadae8'\n  },\n  registerTextStyle: {\n    color: '#FFFFFF',\n    textAlign: 'center',\n    fontWeight: 'bold',\n    fontSize: 14,\n    alignSelf: 'center',\n    padding: 10\n  },\n  errorTextStyle: {\n    color: 'red',\n    textAlign: 'center',\n    fontSize: 14\n  }\n});","map":{"version":3,"sources":["C:/Users/sacre/AwesomeProject/src/screens/LoginPage.js"],"names":["React","useState","createRef","AsyncStorage","Loader","LoginScreen","navigation","userEmail","setUserEmail","userPassword","setUserPassword","loading","setLoading","errortext","setErrortext","passwordInputRef","handleSubmitPress","alert","dataToSend","email","password","formBody","key","encodedKey","encodeURIComponent","encodedValue","push","join","fetch","method","body","headers","then","response","json","responseJson","console","log","status","setItem","data","replace","msg","catch","error","styles","mainBody","flex","justifyContent","alignContent","alignItems","SectionStyle","inputStyle","UserEmail","current","focus","UserPassword","Keyboard","dismiss","errorTextStyle","buttonStyle","buttonTextStyle","registerTextStyle","navigate","LoginPage","StyleSheet","create","backgroundColor","flexDirection","height","marginTop","marginLeft","marginRight","margin","borderWidth","color","borderColor","borderRadius","marginBottom","paddingVertical","fontSize","paddingLeft","paddingRight","textAlign","fontWeight","alignSelf","padding"],"mappings":"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","sourcesContent":["import React, {useState, createRef} from 'react';\r\nimport {\r\n  StyleSheet,\r\n  TextInput,\r\n  View,\r\n  Text,\r\n  ScrollView,\r\n  Image,\r\n  Keyboard,\r\n  TouchableOpacity,\r\n  KeyboardAvoidingView,\r\n} from 'react-native';\r\n\r\nimport AsyncStorage from '@react-native-community/async-storage';\r\n\r\nimport Loader from './Components/Loader';\r\n\r\nconst LoginScreen = ({navigation}) => {\r\n  const [userEmail, setUserEmail] = useState('');\r\n  const [userPassword, setUserPassword] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [errortext, setErrortext] = useState('');\r\n\r\n  const passwordInputRef = createRef();\r\n\r\n  const handleSubmitPress = () => {\r\n    setErrortext('');\r\n    if (!userEmail) {\r\n      alert('Please fill Email');\r\n      return;\r\n    }\r\n    if (!userPassword) {\r\n      alert('Please fill Password');\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    let dataToSend = {email: userEmail, password: userPassword};\r\n    let formBody = [];\r\n    for (let key in dataToSend) {\r\n      let encodedKey = encodeURIComponent(key);\r\n      let encodedValue = encodeURIComponent(dataToSend[key]);\r\n      formBody.push(encodedKey + '=' + encodedValue);\r\n    }\r\n    formBody = formBody.join('&');\r\n\r\n    fetch('http://localhost:3000/api/user/login', {\r\n      method: 'POST',\r\n      body: formBody,\r\n      headers: {\r\n        //Header Defination\r\n        'Content-Type':\r\n        'application/x-www-form-urlencoded;charset=UTF-8',\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((responseJson) => {\r\n        //Hide Loader\r\n        setLoading(false);\r\n        console.log(responseJson);\r\n        // If server response message same as Data Matched\r\n        if (responseJson.status === 'success') {\r\n          AsyncStorage.setItem('user_id', responseJson.data.email);\r\n          console.log(responseJson.data.email);\r\n          navigation.replace('DrawerNavigationRoutes');\r\n        } else {\r\n          setErrortext(responseJson.msg);\r\n          console.log('Please check your email id or password');\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        //Hide Loader\r\n        setLoading(false);\r\n        console.error(error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <View style={styles.mainBody}>\r\n      <Loader loading={loading} />\r\n      <ScrollView\r\n        keyboardShouldPersistTaps=\"handled\"\r\n        contentContainerStyle={{\r\n          flex: 1,\r\n          justifyContent: 'center',\r\n          alignContent: 'center',\r\n        }}>\r\n        <View>\r\n          <KeyboardAvoidingView enabled>\r\n            <View style={{alignItems: 'center'}}>\r\n              \r\n            </View>\r\n            <View style={styles.SectionStyle}>\r\n              <TextInput\r\n                style={styles.inputStyle}\r\n                onChangeText={(UserEmail) =>\r\n                  setUserEmail(UserEmail)\r\n                }\r\n                placeholder=\"Enter Email\" //dummy@abc.com\r\n                placeholderTextColor=\"#8b9cb5\"\r\n                autoCapitalize=\"none\"\r\n                keyboardType=\"email-address\"\r\n                returnKeyType=\"next\"\r\n                onSubmitEditing={() =>\r\n                  passwordInputRef.current &&\r\n                  passwordInputRef.current.focus()\r\n                }\r\n                underlineColorAndroid=\"#f000\"\r\n                blurOnSubmit={false}\r\n              />\r\n            </View>\r\n            <View style={styles.SectionStyle}>\r\n              <TextInput\r\n                style={styles.inputStyle}\r\n                onChangeText={(UserPassword) =>\r\n                  setUserPassword(UserPassword)\r\n                }\r\n                placeholder=\"Enter Password\" //12345\r\n                placeholderTextColor=\"#8b9cb5\"\r\n                keyboardType=\"default\"\r\n                ref={passwordInputRef}\r\n                onSubmitEditing={Keyboard.dismiss}\r\n                blurOnSubmit={false}\r\n                secureTextEntry={true}\r\n                underlineColorAndroid=\"#f000\"\r\n                returnKeyType=\"next\"\r\n              />\r\n            </View>\r\n            {errortext != '' ? (\r\n              <Text style={styles.errorTextStyle}>\r\n                {errortext}\r\n              </Text>\r\n            ) : null}\r\n            <TouchableOpacity\r\n              style={styles.buttonStyle}\r\n              activeOpacity={0.5}\r\n              onPress={handleSubmitPress}>\r\n              <Text style={styles.buttonTextStyle}>LOGIN</Text>\r\n            </TouchableOpacity>\r\n            <Text\r\n              style={styles.registerTextStyle}\r\n              onPress={() => navigation.navigate('RegisterPage')}>\r\n              New Here ? Register\r\n            </Text>\r\n          </KeyboardAvoidingView>\r\n        </View>\r\n      </ScrollView>\r\n    </View>\r\n  );\r\n};\r\nexport default LoginPage;\r\n\r\nconst styles = StyleSheet.create({\r\n  mainBody: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    backgroundColor: '#307ecc',\r\n    alignContent: 'center',\r\n  },\r\n  SectionStyle: {\r\n    flexDirection: 'row',\r\n    height: 40,\r\n    marginTop: 20,\r\n    marginLeft: 35,\r\n    marginRight: 35,\r\n    margin: 10,\r\n  },\r\n  buttonStyle: {\r\n    backgroundColor: '#7DE24E',\r\n    borderWidth: 0,\r\n    color: '#FFFFFF',\r\n    borderColor: '#7DE24E',\r\n    height: 40,\r\n    alignItems: 'center',\r\n    borderRadius: 30,\r\n    marginLeft: 35,\r\n    marginRight: 35,\r\n    marginTop: 20,\r\n    marginBottom: 25,\r\n  },\r\n  buttonTextStyle: {\r\n    color: '#FFFFFF',\r\n    paddingVertical: 10,\r\n    fontSize: 16,\r\n  },\r\n  inputStyle: {\r\n    flex: 1,\r\n    color: 'white',\r\n    paddingLeft: 15,\r\n    paddingRight: 15,\r\n    borderWidth: 1,\r\n    borderRadius: 30,\r\n    borderColor: '#dadae8',\r\n  },\r\n  registerTextStyle: {\r\n    color: '#FFFFFF',\r\n    textAlign: 'center',\r\n    fontWeight: 'bold',\r\n    fontSize: 14,\r\n    alignSelf: 'center',\r\n    padding: 10,\r\n  },\r\n  errorTextStyle: {\r\n    color: 'red',\r\n    textAlign: 'center',\r\n    fontSize: 14,\r\n  },\r\n});"]},"metadata":{},"sourceType":"module"}